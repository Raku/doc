#!/usr/bin/env raku

use Test;
BEGIN plan :skip-all<Test applicable to git checkout only> unless '.git'.IO.e;
use Test-Files;

=begin overview

C<=TITLE> and C<=SUBTITLE> headings must follow certain capitilization rules:

If the title is for something in the object model, we allow the lower case keyword and the
correctly cased type, e.g. C<class Real>.

If the title contains one of the words in the skiplist, or something that matches a
Raku type, ignore that word.

For the remaining words, the first character should be capitalized, and the remaining characters lowercase.

=end overview

my @files = Test-Files.documents;

if @files {
    plan +@files;
} else {
    plan :skip-all<No document files specified>
}

# these words don't have to be capitalized
# my $stopwords = /^()$/;

for @files -> $file {
    my @lines;
    my @examples;
    my $line-no = 0;
    for $file.IO.lines -> $line {
        $line-no++;
        if $line.starts-with("=TITLE ") or $line.starts-with("=SUBTITLE ") {
            # ignore first word like "=TITLE"
            my $title = $line.substr($line.index(' ') + 1);
            # ignore "class X::TypeCheck" and the like
            $title ~~ s:g/^ ( class | role | module | enum | package ) \s+ \S+//;
            # proper names, macros, acronyms, and other exceptions
            $title ~~ s:g/ <?wb> (
                I
                | Raku | RakuAST | Rakudo | RakuDoc | PerlÂ 6 | Pod6 | P6 | C3 | NQP
                | AST | EVAL | PRE | POST | CLI | MOP
                | TITLE | SUBTITLE | "MONKEY-TYPING"
                | API | TCP | UDP | FAQ
                | JavaScript | Node | Haskell | Python | Ruby | C | Node.js | Perl
                | "Input/Output" | "I/O"
                | "Alice in Wonderland"
                | "Virtual Machine"
                | "Binary Large OBject"
                | Boolean | Unicode | ASCII
                | "Normal Form " ( "C" | "D" | "KC" | "KD" )
                | POSIX | QNX | Windows | Cygwin | Win32
                # class names
                | CompUnits
                | Whatever
                | Scheduler
                | NaN
                | ( <:Lu><:L>+ "::" )+ <:Lu><:L>+
                # these seem fishy?
                | Socket
            ) <?wb> //;
            $title ~~ s:g/ <?wb> <[ C ]> \< .*? \> //;
            # ignore known classes like "Real" and "Date" which are capitalized
            my @words = $title ~~ m:g/ <?wb> ( <:Lu> \S+ ) /;
            for @words -> $word {
                # if it exists, skip it
                try {
                    ::($word);
                    $title ~~ s:g/ << $word >> //;
                }
            }
            # sentence case: all lowercase, titlecase for first
            # character except for cases where the first word is a
            # uncapitalized name of a program
            if $title !~~ $title.lc.tc and $title !~~ /^ rakudoc / {
                @lines.push($line-no);
                @examples.push($line);
            }
        }
    }
    if @lines {
        flunk "$file has inconsistent capitalised headings on lines: {@lines}\n"
        ~ @examples.join("\n");
    } else {
        pass "$file capitalises headings consistently ";
    }
}
