=begin pod :tag<index>

=TITLE Traps to avoid

=SUBTITLE Traps to avoid when getting started with Perl 6

When learning a programming language, possibly with the background of being
familiar with another programming language, there are always some things
that can surprise you and might cost valuable time in debugging and
discovery.

This document aims to show common misconceptions.

During the making of Perl 6 great pains were taken to get rid of warts in
the syntax.  When you whack one wart, though, sometimes another pops up.  So
a lot of time was spent finding the minimum number of warts or trying to put
them where they would rarely be seen.  Because of this, Perl 6's warts are
in different places than you may expect them to be when coming from another
language.

=head1 Variables and Constants

=head2 Constants are Compile Time

Constants are computed at compile time, so if you use them in modules keep in mind
their values will be frozen due to pre-compilation:

    # WRONG (most likely):
    unit module Something::Or::Other;
    constant $config-file = "config.txt".IO.slurp;

The C<$config-file> will be slurped during precompilation and changes to
C<config.txt> file won't be re-loaded when you start the script again; only when
the module is re-compiled.

Avoiding L<using a container|/language/containers> and
L<binding a value|/language/containers#Binding> to a variable can offer
behaviour similar to constants, so use that instead, if you want the value
to get updated:

    # Good; file gets updated from 'config.txt' file on each script run:
    unit module Something::Or::Other;
    my $config-file := "config.txt".IO.slurp;

=head1 Objects

=head2 Assigning to attributes

Newcomers often think that, because attributes with accessors are declared
as C<has $.x>, they can assign to C<$.x> inside the class. That's not the
case.

For example

    use v6.c;
    class Point {
        has $.x;
        has $.y;
        method double {
            $.x *= 2;   # WRONG
            $.y *= 2;   # WRONG
            self;
        }
    }

    say Point.new(x => 1, y => -2).double.x

dies with

    Cannot assign to an immutable value

in the first line marked with C<# WRONG>, because C<$.x>, short for C<$(
self.x )>, is a call to a read-only accessor.

The syntax C<has $.x> is short for something like C<has $!x; method x() {
$!x }>, so the actual attribute is called C<$!x>, and a read-only accessor
method is automatically generated.

Thus the correct way to write method C<double> is

        method double {
            $!x *= 2;
            $!y *= 2;
            self;
        }

which operates on the attributes directly.

=head2 BUILD prevents automatic attribute initialization from constructor arguments

When you define your own C<BUILD> submethod, you must take care of
initializing all attributes yourself. For example

    use v6.c;
    class A {
        has $.x;
        has $.y;
        submethod BUILD {
            $!y = 18;
        }
    }

    say A.new(x => 42).x;       # OUTPUT: «Any␤»

leaves C<$!x> uninitialized, because the custom C<BUILD> doesn't initialize
it.

One possible remedy is to explicitly initialize the attribute in C<BUILD>:

        submethod BUILD(:$x) {
            $!y = 18;
            $!x := $x;
        }

which can be shortened to:

        submethod BUILD(:$!x) {
            $!y = 18;
        }

Another, more general approach is to leave C<BUILD> alone, and hook into the
C<BUILDALL> mechanism instead:

    use v6.c;
    class A {
        has $.x;
        has $.y;
        method BUILDALL(|c) {
            callsame;
            $!y = 18;
            self
        }
    }

    say A.new(x => 42).x;       # OUTPUT: «42␤»

(Note that C<BUILDALL> is a method, not a submethod. That's because by
default, there is only one such method per class hierarchy, whereas C<BUILD>
is explicitly called per class. Which also explains why you need the
C<callsame> inside C<BUILDALL>, but not inside C<BUILD>).

=head1 Regexes

=head2 Whitespace in Regexes does not match literally

    $ perl6 -e "say 'a b' ~~ /a b/"
    False

Whitespace in regexes is, by default, considered an optional filler without
semantics, just like in the rest of the Perl 6 language.

Ways to match whitespace:

=item C<\s> to match any one whitespace, C<\s+> to match at least one
=item C<' '> (a blank in quotes) to match a single blank
=item C<\t>, C<\n> for specific whitespace (tab, newline)
=item C<\h>, C<\v> for horizontal, vertical whitespace
=item C<<.ws>>, a built-in rule for whitespace that oftentimes does what
      you actually want it to do
=item with C<m:s/a b/> or C<m:sigspace/a b/>, the blank in the regexes
      matches arbitrary whitespace

=head1 Captures

=head2 Containers versus values in a Capture

Beginners might expect a variable in a C<Capture> to supply its current
value when that C<Capture> is later used.  For example:

    $ perl6 -e 'my $a = 2; say join ",", ($a, ++$a)'
    3,3

Here the C<Capture> contained the B<container> pointed to by C<$a> and the
B<value> of the result of the expression C<++$a>.  Since the C<Capture> must
be reified before C<&say> can use it, the C<++$a> may happen before C<&say>
looks inside the container in C<$a> and so it may already be incremented.

Instead, use an expression that produces a value when you want a value.

    $ perl6 -e 'my $a = 2; say join ",", (+$a, ++$a)'
    2,3

=head1 Arrays

=head2 Referencing the last element of an array

In Perl 5 one could reference the last element of an array by asking for the
"-1th" element of the array, e.g.:

    my @array = qw{victor alice bob charlie eve};
    say @array[-1];    # OUTPUT: «eve␤»

In Perl 6 it is not possible to use negative subscripts, however the same is
achieved by actually using a function, namely C<*-1>.  Thus accessing the
last element of an array becomes:

    my @array = qw{victor alice bob charlie eve};
    say @array[*-1];   # OUTPUT: «eve␤»

Yet another way is to utilize the array's tail method:

    my @array = qw{victor alice bob charlie eve};
    say @array.tail;      # OUTPUT: «eve␤»
    say @array.tail(2);   # OUTPUT: «(charlie eve)␤»

=head2 Typed Array parameters

Quite often new users will happen to write something like:

    sub foo(Array @a) { ... }

...before they have gotten far enough in the documentation to realize that
this is asking for an Array of Arrays.  To say that C<@a> should only accept
Arrays, use instead:

    sub foo(@a where Array) { ... }

It is also common to expect this to work, when it does not:

    sub bar(Int @a) { 42.say };
    bar([1, 2, 3]);             # expected Positional[Int] but got Array

The problem here is that [1, 2, 3] is not an C<Array[Int]>, it is a plain
old Array that just happens to have Ints in it.  To get it to work,
the argument must also be an C<Array[Int]>.

    my Int @b = 1, 2, 3;
    bar(@b);                    # OUTPUT: «42␤»
    bar(Array[Int].new(1, 2, 3));

This may seem inconvenient, but on the upside it moves the type-check
on what is assigned to C<@b> to where the assignment happens, rather
than requiring every element to be checked on every call.

=head1 Strings

=head2 Quotes and interpolation

Interpolation in string literals can be too clever for your own good.

    "$foo<html></html>" # Perl 6 understands that as:
    $foo<html> ~ '</html>'

    "$foo(" ~ @args ~ ")" # Perl 6 understands that as:
    $foo( ~ @args ~ ")"   # and will produce very confusing error messages

You can avoid those problems using non-interpolating single quotes and switching
to more liberal interpolation with C<\qq[]> escape sequence:

    my $a = 1;
    say '\qq[$a]()$b()';
    OUTPUT: «1()$b()␤»

Another alternative is to use C<Q:c> quoter, and use code blocks C<{}> for
all interpolation:

    my $a = 1;
    say Q:c«{$a}()$b()»;
    OUTPUT: «1()$b()␤»

=head2 Strings are not iterable

There are methods that Str inherits from Any that work on iterables like lists. Iterators on Strings contain one element that is the whole string. To use C<sort>, C<reverse> and friends, you need to split the string into a list first.

    say "cba".sort;              # OUTPUT: «(cba)␤» (what is wrong)
    say "cba".comb.sort.join;    # OUTPUT: «abc␤»

=head2 IO::Path Stringification

Partly for historical reasons and partly by design, an L<IO::Path> object
L<stringifies|/type/IO::Path#method_Str> without considering its
L«C<CWD> attribute|/type/IO::Path#attribute_CWD», which means if you L<chdir>
and then stringify an L<IO::Path>, the resultant string won't reference
the original filesystem object:

=begin code
    with 'foo'.IO {
        .Str.say;       # OUTPUT: «foo␤»
        .relative.say;  # OUTPUT: «foo␤»

        chdir "/tmp";
        .Str.say;       # OUTPUT: «foo␤»
        .relative.say   # OUTPUT: «../home/camelia/foo␤»
    }
=end code

The easy way to avoid this issue is to not stringify an L<IO::Path> object at all.
Core routines that work with paths can take an L<IO::Path> object, so you don't
need to stringify the paths.

If you do have a case where you need a stringified version of an L<IO::Path>, use
L<absolute> or L<relative> methods to stringify it into an absolute or relative
path, respectively.


=head1 Operators

Some operators commonly shared among other languages were repurposed in Perl 6 for other, more common, things:

=head2 Junctions

The C<^>, C<|>, and C<&> are I<not> bitwise operators, they create L<Junctions|/type/Junction>. The corresponding
bitwise operators in Perl 6 are: C<+^>, C<+|>, C<+&> for integers and C<?^>, C<?|>, C<?&> for booleans.

=head2 String Ranges/Sequences

In some languages, using strings as range end points, considers the entire string when figuring out what the next string
should be; loosely treating the strings as numbers in a large base. Here's Perl 5 version:

    say join ", ", "az".."bc";
    az, ba, bb, bc

Such a range in Perl 6 will produce a different result, where I<each letter> will be ranged to a corresponding letter in the
end point, producing more complex sequences:

    say join ", ", "az".."bc";
    az, ay, ax, aw, av, au, at, as, ar, aq, ap, ao, an, am, al, ak, aj, ai, ah,
    ag, af, ae, ad, ac, bz, by, bx, bw, bv, bu, bt, bs, br, bq, bp, bo, bn, bm,
    bl, bk, bj, bi, bh, bg, bf, be, bd, bc

    say join ", ", "r2".."t3";
    # OUTPUT: «r2, r3, s2, s3, t2, t3␤»

To achieve simpler behaviour, similar to the Perl 5 example above, use a sequence operator that calls C<.succ> method on the
starting string:

    say join ", ", ("az", *.succ ... "bc");
    # OUTPUT: «az, ba, bb, bc␤»

=head2 Topicalizing Operators

The smart match operator C<~~> and C<andthen> set the topic C<$_> to their LHS.
In conjunction with implicit method calls on the topic this can lead to
surprising results.

    my &method = { note $_; $_ };
    $_ = 'object';
    say .&method;
    # OUTPUT: «object␤object␤»
    say 'topic' ~~ .&method;
    # OUTPUT: «topic␤True␤»

In many cases flipping the method call to the LHS will work.

    my &method = { note $_; $_ };
    $_ = 'object';
    say .&method;
    # OUTPUT: «object␤object␤»
    say .&method ~~ 'topic';
    # OUTPUT: «object␤False␤»

=head2 Fat Arrow and Constants

The fat arrow operator C«=>» will turn words on its left hand side to C<Str>
without checking the scope for constants or C<\>-sigiled variables. Use
explicit scoping to get what you mean.

    constant V = 'x';
    my %h = V => 'oi‽', ::V => 42;
    say %h.perl
    # OUTPUT: «{:V("oi‽"), :x(42)}␤»

=head1 Common Precedence Mistakes

=head2 Adverbs and Precedence

Adverbs do have a precedence that may not follow the order of operators that is displayed on your screen. If two operators of equal precedence are followed by an adverb it will pick the first operator it finds in the abstract syntax tree. Use parentheses to help Perl 6 understand what you mean or use operators with looser precedence.

    my %x = a => 42;
    say !%x<b>:exists;            # dies with X::AdHoc
    say %x<b>:!exists;            # this works
    say !(%x<b>:exists);          # works too
    say not %x<b>:exists;         # works as well
    say True unless %x<b>:exists; # avoid negation altogether

=head2 Ranges and Precedence

The loose precedence of C<..> can lead to some errors.  It is usually best to parenthesize ranges when you want to operate on the entire range.

    1..3.say;    # says "3" (and warns about useless "..")
    (1..3).say;  # says "1..3"

=head2 Loose boolean operators

The precedence of C<and>, C<or>, etc. is looser then routine calls. This can
have surprising results for calls to routines that would be operators or
statements in other languages like C<return>, C<last> and many others.

    sub f {
        return True and False;
        # this is actually
        # (return True) and False;
    }
    say f; # OUTPUT: «True␤»

=head2 Exponentiation Operator and Prefix Minus

    say -1²;   # OUTPUT: «-1␤»
    say -1**2; # OUTPUT: «-1␤»

When performing a
L<regular mathematical calculation|http://www.wolframalpha.com/input/?i=-1%C2%B2>,
the power takes precedence over the minus; so C<-1²> can be written as C<-(1²)>.
Perl 6 matches these rules of mathematics and the precedence of C<**> operator is
tighter than that of the prefix C<->. If you wish to raise a negative number
to a power, use parentheses:

    say (-1)²;   # OUTPUT: «1␤»
    say (-1)**2; # OUTPUT: «1␤»

The operator infix:<but> is narrower then the list constructor. When providing
a list of roles to mix in, always use parentheses.

    role R1 { method m {} }
    role R2 { method n {} }
    my $a = 1 but R1,R2; # R2 is in sink context
    say $a.^name;
    # OUTPUT: «Int+{R1}␤»

=head1 Subroutine and method calls

Subroutine and method calls can be made using one of two forms:

  foo(...); # function call form, where ... represent the required arguments
  foo ...;  # list op form, where ... represent the required arguments

The function call form can cause problems for the unwary when
whitespace is added after the function or method name and before the
opening parenthesis.

First we consider functions with zero or one parameter:

  sub foo() { say 'no arg' }
  sub bar($a) { say "one arg: $a" }

Then execute each with and without a space after the name:

  foo();    # okay: no arg
  foo ();   # FAIL: Too many positionals passed; expected 0 arguments but got 1
  bar($a);  # okay: one arg: 1
  bar ($a); # okay: one arg: 1

Now declare a function of two parameters:

  sub foo($a, $b) { say "two args: $a, $b" }

Execute it with and without the space after the name:

  foo($a, $b);  # okay: two args: 1, 2
  foo ($a, $b); # FAIL: Too few positionals passed; expected 2 arguments but got 1

The lesson is: "be careful with spaces following sub and method names
when using the function call format."  As a general rule, good
practice might be to avoid the space after a function name when using
the function call format.

Note that there are clever ways to eliminate the error with the
function call format and the space, but that is bordering on hackery
and will not be mentioned here.  For more information, consult
L<Functions|/language/functions#Functions>.

Finally, note that, currently, when declaring the functions whitespace
may be used between a function or method name and the parentheses
surrounding the parameter list without problems.

=head2 Named Parameters

Many built-in subroutines and method calls accept named parameters and your own
code may accept them as well, but be sure the arguments you pass when calling
your routines are actually named parameters:

    sub foo($a, :$b) { ... }
    foo(1, 'b' => 2); # FAIL: Too many positionals passed; expected 1 argument but got 2

What happened? That second argument is not a named parameter argument, but a
L<Pair|/type/Pair> passed as a positional argument. If you want a named
parameter it has to look like a name to Perl:

    foo(1, b => 2); # okay
    foo(1, :b(2));  # okay
    foo(1, :b<it>); # okay

    my $b = 2;
    foo(1, :b($b)); # okay, but redundant
    foo(1, :$b);    # okay

    # Or even...
    my %arg = 'b' => 2;
    foo(1, |%arg);  # okay too

That last one may be confusing, but since it uses the C<|> prefix on a
L<Hash|/type/Hash>, it means "treat this hash as holding named arguments."

If you really do want to pass them as pairs you should use a L<List|/type/List>
or L<Capture|/type/Capture> instead:

    my $list = ('b' => 2); # this is a List containing a single Pair
    foo(|$list, :$b); # okay: we passed the pair 'b' => 2 to the first argument
    foo(1, |$list);   # FAIL: Too many positionals passed; expected 1 argument but got 2

    my $cap = \('b' => 2); # a Capture with a single positional value
    foo(|$cap, :$b); # okay: we passed the pair 'b' => 2 to the first argument
    foo(1, |$cap);   # FAIL: Too many positionals passed; expected 1 argument but got 2

A Capture is usually the best option for this as it works exactly like the usual
capturing of routine arguments during a regular call.

The nice thing about the distinction here is that it gives the developer the
option of passing pairs as either named or positional arguments, which can be
handy in various instances.

=head1 Exception Handling

=head2 Sunk C<Proc>

Some methods return a L<Proc> object. If it represents a failed process, C<Proc> itself
won't be exception-like, but B<sinking it> will cause an L<X::Proc::Unsuccessful>
exception to be thrown. That means this construct will throw, despite the C<try> in place:

    try run("perl6", "-e", "exit 42");
    say "still alive";
    # OUTPUT: «The spawned process exited unsuccessfully (exit code: 42)␤»

This is because C<try> receives a C<Proc> and returns it, at which point it sinks and
throws. Explicitly sinking it inside the C<try> avoids the issue
and ensures the exception is thrown inside the C<try>:

    try sink run("perl6", "-e", "exit 42");
    say "still alive";
    # OUTPUT: «still alive␤»

If you're not interested in catching any exceptions, then use an anonymous
variable to keep the returned C<Proc> in; this way it'll never sink:

    $ = run("perl6", "-e", "exit 42");
    say "still alive";
    # OUTPUT: «still alive␤»


=head1 Using Shortcuts

=head2 The ^ twigil

Using the C<^> twigil can save a fair amount of time and space when writing out small blocks of code. As an example:

    for 1..8 -> $a, $b { say $a + $b; }

can be shortened to just

    for 1..8 { say $^a + $^b; }

The trouble arises when a person wants to use more complex names for the variables, instead of just one letter. The C<^> twigil is able to have the positional variables be out of order and named whatever you want, but assigns values based on the variable's Unicode ordering. In the above example, we can have C<$^a> and C<$^b> switch places, and those variables will keep their positional values. This is because the Unicode character 'a' comes before the character 'b'. For example:

    #In order
    sub f1 { say "$^first $^second"; }
    f1 "Hello", "there";    # OUTPUT: «Hello There␤»

    #Out of order
    sub f2 { say "$^second $^first"; }
    f2 "Hello", "there";    # OUTPUT: «there Hello␤»

Due to the variables allowed to be called anything, this can cause some problems if you are not accustomed to how Perl 6 handles these variables.

    for 1..4 { say "$^one $^two $^three $^four"; }    # OUTPUT: «2 4 3 1␤»

=head1 Scope

=head2 Using a C<once> block

The C<once> block is a block of code that will only run once when its parent block is run. As an example:

    my $var = 0;
    for 1..10 {
        once { $var++; }
    }
    say "Variable = $var";    # OUTPUT: «Variable = 1␤»

This functionality also applies to other code blocks like C<sub> and C<while>, not just C<for> loops. Problems arise though, when trying to nest C<once> blocks inside of other code blocks:

    my $var = 0;
    for 1..10 {
        do { once { $var++; } }
    }
    say "Variable = $var";    # OUTPUT: «Variable = 10␤»

In the above example, the C<once> block was nested inside of a code block which was inside of a C<for> loop code block. This causes the C<once> block to run multiple times, because the C<once> block uses state variables to determine whether it has run previously. This means that if the parent code block goes out of scope, then the state variable the C<once> block uses to keep track of if it has run previously, goes out of scope as well. This is why C<once> blocks and C<state> variables can cause some unwanted behaviour when buried within more than one code block.

If you want to have something that will emulate the functionality of a once block, but still work when buried a few code blocks deep, we can manually build the functionality of a C<once> block. Using the above example, we can change it so that it will only run once, even when inside the C<do> block by changing the scope of the C<state> variable.

    my $var = 0;
    for 1..10 {
        state $run-code = True;
        do { if ($run-code) { $run-code = False; $var++; } }
    }
    say "Variable = $var";    # OUTPUT: «Variable = 1␤»

In this example, we essentially manually build a C<once> block by making a C<state> variable called C<$run-code> at the highest level that will be run more than once, then checking to see if C<$run-code> is C<True> using a regular C<if>. If the variable C<$run-code> is C<True>, then make the variable C<False> and continue with the code that should only be completed once.

The main difference between using a C<state> variable like the above example and using a regular C<once> block is what scope the C<state> variable is in. The scope for the C<state> variable created by the C<once> block, is the same as where you put the block (imagine that the word 'C<once>' is replaced with a state variable and an C<if> to look at the variable). The example above using C<state> variables works because the variable is at the highest scope that will be repeated; whereas the example that has a C<once> block inside of a C<do>, made the variable within the C<do> block which is not the highest scope that is repeated.

Using a C<once> block inside a class method will cause the once state to carry across all instances of that class.
For example:

    class A {
        method sayit() { once say 'hi' }
    }
    my $a = A.new;
    $a.sayit;      # OUTPUT: «hi␤»
    my $b = A.new;
    $b.sayit;      # nothing

=end pod

# vim: expandtab shiftwidth=4 ft=perl6
