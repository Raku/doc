=begin pod

=TITLE Typesystem

=SUBTITLE Introduction to the type system of Perl 6

=head1 Definition of a Perl 6 Type

TODO

=head1 Type Declarators

TODO

=head2 C<class>

TODO

=head2 C<role>

TODO

=head2 C<enum>

Enumerations provide constant key-value-pairs with an associated type. Any key
is of that type and injected as a symbol into the current scope. If the symbol
is used, it is treated as a constant expression and the symbol is replaced with
the value of the enum-pair. Any Enumeration inherits methods from the role
C<Enumeration>. Complex expressions for generating key-value-pairs are
not supported.

Stringification of the symbol will provide the key of the enum-pair.

    enum Names ( name1 => 1, name2 => 2 );
    say name1, ' ', name2; # OUTPUT«name1 name2»
    say name1.value, ' ', name2.value; # OUTPUT«1 2␤»

Comparing symbols will use type information and the value of the enum-pair. As
value types C<Numerical> an C<Str> are supported.

    sub same(Names $a, Names $b){
       $a eqv $b
    }

    say same(name1, name1); # OUTPUT«True␤»
    say same(name1, name2); # OUTPUT«False␤»
    my $a = name1;
    say $a ~~ Names; # OUTPUT«True␤»
    say $a.WHAT; # OUTPUT«Names␤»

All keys have to be of the same type.

    enum Mass ( mg => 1/1000, g => 1/1, kg => 1000/1 );
    dd Mass.enums; # OUTPUT«{:g(1.0), :kg(1000.0), :mg(0.001)}␤»

If no value is given C<Int> will be assumed as the values type and incremented
by one per key starting at zero.

    enum Numbers <one two three four>;
    dd Numbers.enums; # OUTPUT«{:four(3), :one(0), :three(2), :two(1)}␤»

A different starting value can be provided.

    enum Numbers «:one(1) two three four»;
    dd Numbers.enums; # OUTPUT«{:four(4), :one(1), :three(3), :two(2)}␤»


Enums can be anonymous. They will be no type created, resulting in a lack of
introspectiveness. The returned object is of type C<Map>.

    my $e = enum <one two three>;
    say two; # OUTPUT«two()(Map)␤»
    say one.WHAT; # OUTPUT«()␤»
    say $e.WHAT; # OUTPUT«(Map)␤»


=head3 Methods

=head4 method enums

Defined as:

    method enums()

Returns the list of enum-pairs. Works both on the enum type and any key.

    enum Mass ( mg => 1/1000, g => 1/1, kg => 1000/1 );
    say Mass.enums, g.enums; # OUTPUT«{g => 1, kg => 1000, mg => 0.001}{g => 1, kg => 1000, mg => 0.001}␤»

=head4 method key

Returns the key of an enum-pair.

   say g.key; # OUTPUT«g␤»

=head4 method value

Returns the value of an enum-pair.

    say g.value; # OUTPUT«1␤»

=head4 method pair

Defined as:

    method pair(::?CLASS:D:)

Returns a C<Pair> of the enum-pair.

    say g.pair; # OUTPUT«g => 1␤»

=head4 method kv

Defined as:

    multi method kv(::?CLASS:D:)

Returns a list with key and value of the enum-pair.

    say g.kv; # OUTPUT«(g 1)␤»


=head2 C<module>

TODO

=head2 C<package>

TODO

=head2 C<grammar>

TODO

=head2 C<subset>

A X<C<subset>|subset> declares a new type that will re-dispatch to its base type. If a
C<where> clause is supplied any assignment will be checked against the given
code object.

    subset Positive of Int where * > -1;
    my Positive $i = 1;
    $i = -42; # OUTPUT«Type check failed in assignment to $i; expected Positive but got Int (-42)␤ …»

=end pod
