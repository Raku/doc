=begin pod :tag<perl6>

=TITLE Perl 6 native types

=SUBTITLE Using the types the compiler and hardware make available to you.

Perl 6 offers a set of I<native> types with a fixed, and known, representation
in memory. This page shows which ones exist and how they can be used. Please
check also the page on L<native numerics|/language/numerics#Native_Numerics> for
more information on them.

X<|int>X<|uint>X<|num>X<|str>
=head1 Types with native representation

Some simple types in Perl 6 have a I<native> representation, indicating that they will use the C language representation provided by the compiler, operating system and machine. These are the four native types available:

=begin table
    int            Equivalent to Int
    uint           Equivalent to Int with the unsigned trait
    num            Equivalent to Num
    str            Equivalent to Str
=end table

However, these types do not necessarily have the size that is required by the
L<NativeCall|/lang/nativecall> interface (e.g., Perl 6's C<int> can be 8 bytes
but C's C<int> is only 4 bytes). Instead, the types below will have to be used
instead of the types C<int> or C<num> listed above.

In general, these variables will behave in the same way as regular scalar
variables, in a behavior that is called
L<I<auto-boxing>|/language/numerics#Auto-Boxing>; however, there are some
differences, since what you are actually declaring is how they will be
represented, not their actual type. The first one is that their type will be
actually their equivalent type, not their native type.

    my int $intillo = 3;
    say $intillo.^name; # OUTPUT: «Int␤»

This obviously means that they will smartmatch their equivalent, not their
native type:

    my str $strillo = "tres";
    say $strillo ~~ str; # OUTPUT: «False␤»
    say $strillo ~~ Str; # OUTPUT: «True␤»

They cannot be bound either. Trying to do C<my num $numillo := 3.5> will raise
the exception C<Cannot bind to natively typed variable '$variable-name'; use
assignment instead>.

X<|int8>X<|int16>X<|int32>X<|int64>X<|uint8>X<|uint16>X<|uint32>X<|uint64>X<|num32>X<|num64>X<|byte>
=head1 Types with native representation and size

What has been mentioned about types with native representation also applies
here; they will be auto-boxed to Perl 6 types and will not be boundable.
However, these types, which are listed in the table below, have the
characteristic of being usable in L<NativeCall> functions.

=begin table
    int8           (int8_t in C, also used for char)
    int16          (int16_t in C, also used for short)
    int32          (int32_t in C, also used for int)
    int64          (int64_t in C)
    byte, uint8    (uint8_t in C, also used for unsigned char)
    uint16         (uint16_t in C, also used for unsigned short)
    uint32         (uint32_t in C, also used for unsigned int)
    uint64         (uint64_t in C)
    num32          (float in C)
    num64          (double in C)
=end table

These types have a fixed size representation which is independent of the
platform, and thus can be used safely for those calls. Nothing prevents us from
using it in any other environment, if we so wish. In the same way as the types
above, this size will have to be taken into account when assigning values to
variables of this type:

    my byte $intillo = 257;
    say $intillo; # OUTPUT: «1␤»

Since C<byte> is able to hold only 8 bits, it will I<wrap over> and assign the result of the original value modulo 256, which is what is shown.

The main difference between types with declared native size and those without is the use of X<is nativesize> in their declaration. For instance, C<int8> is declared in this way:

    my native int8 is repr('P6int') is Int is nativesize( 8) { }

Indicating that it will use, besides an integer representation (C<P6int>), a
native size of only 8 bits. This trait, however, is not intended to be used in
your programs since it is not part of the Perl 6 specification.

=head1 I<Atomic> types

In this context, I<atomic> refers to safe operation under threading. Perl 6
provides a type, L<C<atomicint>|/type/atomicint>, and
L<some operations|/type/atomicint#Routines> which, together, guarantee this.
Please check
L<the atomic operations section on the Numerics page|/language/numerics#Atomic_Operations>
for more information on this.

=end pod

# vim: expandtab softtabstop=4 shiftwidth=4 ft=perl6
