=begin pod :kind("Language") :subkind("Modules") :category("tutorial")

=TITLE Distributions: Testing

=SUBTITLE Testing your distribution of modules

This also means that a testing program such as B<Perl>'s C<prove> or the B<Raku>
equivalent L<prove6|https://raku.land/cpan:LEONT/App::Prove6> can be
run in the root directory of the B<distribution> as, e.g.,

=for code :lang<shell>
prove -e 'raku -I.'

or

=for code :lang<shell>
prove6 -I.

In both cases, the testing program looks for a directory C<t/> and runs the test
programs there (see L<Testing|/language/testing>).

The parameter B<-I.>, rather than B<-Ilib>, in the examples above is significant
because then the compiler will inspect the C<META6.json> file in the root
directory of the B<distribution>.

If you are just beginning to develop a module (or series of modules), and you
have not decided what to call or where to place the code (perhaps splitting it
into several C<*.rakumod> files), but assuming all the module files are under
the C<lib/> directory, then it is possible to use

=for code :lang<shell>
prove6 -Ilib

This is deceptive. A distribution may pass all the tests based on local files,
and it may pass release steps, but the distribution (and the
modules/classes/roles it contains) may not be automatically installed. To give a
common example, but not the only way this problem can manifest itself, if the
distribution is listed in the C<depends> section of another distribution, and a
user is trying to install the other distribution using C<zef> (or a package
manager using the same testing regime), perhaps using a CLI command C<zef
install --deps-only .>, then C<zef> arranges for the tests of the dependent
modules based on B<-I.> and not C<-Ilib>. This will lead to B<rakudo> errors
complaining about the absence of named B<compunits> unless the B<META6.json>
file is correct.

=head1 The C<use-ok> Test

The most basic test that should be run for each C<compunit> that is defined for
the distribution is

=for code :preamble<use Test>
use-ok 'MyModule';

assuming inside C<META6.json> there is a line such as

=for code :lang<json>
provides: { "MyModule": "lib/MyModule.rakumod" },

=head1 The C<meta-ok> test

It is also highly recommended to use the C<Test::META> C<meta-ok> test, which
verifies the validity of the C<META6.json> file. If you wish to add a
distribution (containing modules) to the C<Ecosystem>, then this test will be applied to the
distribution.

=head1 Extended Tests

Since C<meta-ok> only needs to be tested by the developer/maintainer of a
distribution, it can be within a set of extended tests in another directory, e.g.
C</xt>. This is because C<prove6>, for example, only runs the tests in C<t/> by
default. Then to run the extended tests:

=for code :lang<shell>
prove6 -I. xt/

Indeed it is becoming common practice by B<Raku> community developers to place
the extensive testing of a distribution in C<xt/> and to put minimal I<sanity>
tests in C<t/>. Extensive testing is essential for development and quality
control, but it can slow down the installation of popular distributions.

An alternative to placing the C<meta-ok> test in an extended test directory, but
to ensure that it is only run when a developer or maintainer wants to, is to
make the test dependent on an environment variable, e.g., in
C<t/99-author-test.rakutest> there is the following code

=begin code
use Test;

plan 1;

if ?%*ENV<AUTHOR_TESTING> {
    require Test::META <&meta-ok>;
    meta-ok;
    done-testing;
} else {
    skip-rest "Skipping author test";
    exit;
}
=end code

Then when the distribution is being tested by the developer, use

=for code :lang<shell>
    AUTHOR_TESTING=1 prove6 -I.

=head1 More information about Distributions

=item1 L<Distributions: An introduction|/language/distributions/introduction>

=end pod
