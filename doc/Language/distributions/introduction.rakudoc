=begin pod :kind("Language") :subkind("Modules") :category("tutorial")

=TITLE Distributions: An Introduction

=SUBTITLE Distributions and How they Work

=head2 Terminology

This is a point in the Raku journey where we need to get specific with some of
the terminology, so here are some of the terms which will be used:

=item1 B<compunit>: A compilation unit, or compunit for short, is a piece of 
Raku code that is analyzed and compiled as a single unit. Typically, this 
comes from a source file on disk, but what's inside an EVAL also counts as 
such.

=item1 B<script>: A script refers to a compilation unit that is provided to 
Raku as the entry point for execution. In an invocation like raku foo.raku, 
we say that foo.raku is first compiled and then executed. In Rakudo Raku, in 
this case, the results of the compilation only exist in memory.

=item1 B<module>: A module refers to a compilation unit that is used by a 
script, or by another module used from a script. A module must also be 
compiled before it can be made use of. (There is nothing preventing a given 
source file serving as both a script and a module depending on how it is used).

=item1 B<distribution>: A distribution is a set of zero or more scripts and 
modules that are released together, along with some meta-data and potentially 
resources and tests.

=head2 Basic structure

Module distributions (in the I<set of related source files> sense) in Raku
have the same structure as any distribution in the Perl family of languages:
there is a main project directory containing a C<README> and a C<LICENSE> file,
a C<lib> directory for the source files, which may be individually referred to
as modules and/or may themselves define modules with the C<module> keyword N<As
L<synopsis S11|https://github.com/Raku/old-design-docs/blob/master/S11-modules.pod#Units> says: Confusing? Yes it
is.> , a C<t> directory for tests, and possibly a C<bin> directory for
executable programs and scripts.

See L<filename extensions|/language/filename-extensions> for current and historic
extensions for various file types.

=head1 Distributions

It is important in this section to repeat the note at the beginning of this
document, namely that there is a difference between a B<Raku> C<distribution>,
which approximates a I<module> in other languages, and a B<Raku>
L<module declaration|/language/syntax#package,_module,_class,_role,_and_grammar_declaration>.
The reason for this is that a single file may contain a number of C<class>,
C<module>, C<role> etc declarations, or these declarations may be spread between
different files. In addition, when a C<distribution> is published (see
L<Distributing modules|/language/distributions/introduction>) it may be
necessary to provide access to other resources, such as callable utilities.

B<Raku> also allows for a single distribution to provide multiple C<module>s
that can be C<use>d (or C<require>d etc). The information about a distribution
is contained in the C<META6.json> file in the distribution's root directory. See
below for more about C<META6.json>. Each entity that the B<distribution> allows
to be C<use>d (or C<require>d etc), also called a C<module>, is placed in the
C<provides> section of the C<META6.json> (as specified below).

It should also be noted that when writing the C<depends> section of the
C<META6.json> file, it is the name of the B<distribution> that is listed, not
the name of the C<module> that is desired. Although, for very many entities,
the name of the I<distribution> and the name of the I<module> are the same.
Another global effect of the C<depends> list in a distribution made available to
the Ecosystem, is that package managers, e.g. C<zef>, can look for C<module>
names in all distributions available.

Given this arrangement, the B<rakudo> compiler, or a package manager such as
B<zef>, can obtain all the information needed about each C<module> from a
C<META6.json> file in a directory.

=head2 Contact information

To discuss module development in general, or if your module would
fill a need in the ecosystem, naming, etc., you can use the
L<#raku on irc.libera.chat|irc://irc.libera.chat/#raku> IRC channel.

A repository to discuss tooling issues is available at
L<https://github.com/Raku/toolchain-bikeshed>.

=head1 More information about Distributions

=item1 L<An introduction|/language/distributions/introduction> (this document)
=item1 L<The Tools|/language/distributions/tools>
=item1 L<The Configuration and Structure|/language/distributions/configuration-structure>
=item1 L<The Testing|/language/distributions/testing>
=item1 L<The Code|/language/distributions/code>
=item1 L<Uploading|/language/distributions/uploading>

You may also be interested in:

=item L<Using Modules: An Introduction|/language/using-modules/introduction>
=item L<Making Modules: An Introduction|/language/making-modules/introduction>

=end pod
