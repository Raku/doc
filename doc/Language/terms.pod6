=begin pod

=TITLE Terms

=SUBTITLE Perl 6 Terms

Most syntactic constructs in Perl 6 can be categorized in I<terms> and
L<operators|/language/operators>.

Here you can find an overview of different kinds of terms.

=head1 Literals

=head2 Int

    42
    12_300_00
    :16<DEAD_BEEF>

L<Int> literals consist of digits and can contain underscores
between any two digits.

To specify a base other than ten, use the colonpair form C<< :radix<number> >>.

=head2 Rat

    12.34
    1_200.345_678

L<Rat> literals (rational numbers) contain two integer parts joined by a dot.

Note that trailing dots are not allowed, so you have to write C<1.0> instead
of C<1.> (this rule is important because there are infix operators starting
with a dot, for example the C<..> L<Range> operator).

=head2 Num

    12.3e-32
    3e8

L<Num> literals (floating point numbers) consist of L<Rat> or L<Int>
literals followed by an C<e> and a (possibly negative) exponent. C<3e8>
constructs a L<Num> with value C<3 * 10**8>.

=head2 Str

    'a string'
    'I\'m escaped!'
    "I don't need to be"
    "\"But I still can be,\" he said."
    q|Other delimiters can be used too!|

String literals are most often created with C<'> or C<">, however strings
are actually a powerful sub-language of Perl 6. See L<Quoting Constructs|/language/quoting>.

=head2 Regex

    / match some text /
    rx/slurp \s rest (.*) $/

These forms produce regex literals. See L<Quoting Constructs|/language/quoting>.

=head2 Pair

    a => 1
    'a' => 'b'
    :identifier
    :!identifier
    :identifier<value>
    :identifier<value1 value2>
    :identifier($value)
    :identifier['val1', 'val2']
    :identifier{key1 => 'val1', key2 => 'value2'}
    :$item
    :@array
    :%hash
    :&callable

L<Pair> objects can be created either with C<< infix:«=>» >> (which
auto-quotes the left-hand side if it is an identifier), or with the various
colon-pair forms. Those always start with a colon and then are followed
either by an identifier or the name of an already existing variable (whose
name without the sigil is used as the key and value of the variable is used
as the value of the pair).

In the identifier form of a colon-pair, the optional value can be any
circumfix.  If it is left blank, the value is C<Bool::True>. The value of
the C<:!identifier> form is C<Bool::False>.

If used in an argument list, all of these forms count as named arguments,
with the exception of C<< 'quoted string' => $value >>.

=head2 List

    ()
    1, 2, 3
    <a b c>
    «a b c»
    qw/a b c/

L<List> literals are: the empty pair of parens C<()>, a comma-separated
list, or several quoting constructs.

=head2 term *

Creates an object of type C<Whatever>. See L<Whatever> documentation for
more details.

=head1 Identifier terms

There are built-in identifier terms in Perl 6, which are listed below.  In
addition one can add new identifier terms with the syntax:

    sub term:<forty-two> { 42 };
    say forty-two

or as constants:

    constant forty-two = 42;
    say forty-two;

=head2 term self

Inside a method, C<self> refers to the invocant (i.e. the object the method
was called on). If used in a context where it doesn't make sense, a
compile-time exception of type L<X::Syntax::NoSelf> is thrown.

=head2 term now

Returns an L<Instant> object representing the current time.

=head2 term time

Returns the current POSIX time as an L<Int>.

=head2 term rand

Returns a pseudo-random L<Num> in the range C<0..^1>.

=head2 term π
=head2 term pi

Returns the number C<π>, i.e., the ratio between circumference and diameter
of a circle. C<pi> is the Texas (ASCII) equivalent of C<π>.

=head2 term τ
=head2 term tau

Returns the number C<τ>, i.e., the ratio between circumference and radius
of a circle. C<tau> is the Texas (ASCII) equivalent of C<τ>.

=head2 term e

Returns Euler's number.

=head2 term i

Returns the imaginary unit (for L<Complex> numbers).

=head1 Variables

Variables are discussed in the L<variable language docs |/language/variables>.

=head1 Constants

X<|constant (Terms)>
Constants are declared with C<constant> and do not require a sigil. The RHS is evaluated at compile time, what may be too early to make sense.

    constant Pi = 3.123; # if you happen to be Babylonian

=end pod
