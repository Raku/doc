=begin pod :kind("Language") :subkind("Language") :category("tutorial")

=TITLE Slangs

=SUBTITLE Slangs in Raku

The term "Slang" is used two different ways within the Raku community:

=item1 To refer to sublanguages within Raku, such as the quoting sublanguage
or the regex sublanguage.

=item1 To refer to variants of Raku that are created by adding in a slang
module that modifies the grammar of the language.

=head1 Sublanguages within Raku

The C<~> twigil is for referring to sublanguages (called slangs). The
following are useful:

X<|Variables,$~MAIN>X<|Variables,$~Quote>X<|Variables,$~Quasi>
X<|Variables,$~Regex>X<|Variables,$~Trans>X<|Variables,$~P5Regex>

=begin table
    $~MAIN       the current main language (e.g., Raku statements)
    $~Quote      the current root of quoting language
    $~Quasi      the current root of quasiquoting language
    $~Regex      the current root of regex language
    $~Trans      the current root of transliteration language
    $~P5Regex    the current root of the Perl regex language
=end table

You C<augment> these languages in your current lexical scope.

=begin code
use MONKEY-TYPING;
augment slang Regex {  # derive from $~Regex and then modify $~Regex
    token backslash:std<\Y> { YY };
}
=end code

The C<MONKEY-TYPING> pragma is a necessary prerequisite to using the
C<augment> keyword.  It can be thought of as a reminder that the
following code is of a type that's usually discouraged.  More
documentation on C<augment> is at
L<the augment declarator|/language/variables#The_augment_declarator>.

=head1 Slangs that Modify the Language

=head2 Existing Slangs

Many slangs are made available as modules through zef.  These are useful for:

=item1 Using directly, so you don't have to write your own slang

=item1 As examples, for inspiration in writing your own slangs

To see the existing Slang modules, we can look at:

=item1 L<Everything tagged Slang|https://raku.land/tags/slang>

=item1 L<A search for slang|https://raku.land/?q=slang>

=head2 Prerequisites for Understanding Slangs

If all you wish to do is use existing Slangs, you can stop reading now.
However, if you wish to understand better how to make or modify Slangs, then
the recommended reading before continuing is:

=item1 L<Grammar tutorial|/language/grammar_tutorial>

=item1 L<Grammars|/language/grammars>

=item1 Not required, but helpful:
L<class Grammar|/type/Grammar>


=head2 A Slang Example

To get a good view of a nice, simple Slang, the best candidate would be the
source for L<Slang::Lambda|https://raku.land/zef:lizmat/Slang::Lambda>.

Slang::Lambda modifies the Raku grammar to make it possible to use
the C<λ> (lambda) symbol as the starter symbol of a pointy block (which is
usually C<< -> >>).  The source is so short we can include it here:

=begin code
my role RakuLambda {
    token pointy-block-starter { '->' | '→' | '<->' | '↔' | 'λ' }
}

my role LegacyLambda {
    token lambda { '->' | '<->' | 'λ' }
}

use Slangify:ver<0.0.4+>:auth<zef:lizmat> RakuLambda, Mu, LegacyLambda;
=end code

Then to use it, we do:

=begin code :skip-test<needs module>
use Slang::Lambda;

say (1,2,3).map: λ $x { $x+1 }  # (2 3 4)

=end code

The code is self-evident to those familiar with Raku's grammars.
This is all well and good, but sometimes there's a large gap between
being able to read code, and being able to write it.  How did Elizabeth (the
author of Slang::Lambda) know to use Slangify?  How did she know what token
names to declare?  In her case, it was through extensive study of Raku and
how it works, but in order to avoid this, we're going to step through some
of these things now.

=head2 Slangify

To ease the process of creating Slangs, Elizabeth also created the
L<Slangify|https://raku.land/zef:lizmat/Slangify> module (that's how she
knew about it!)  The Slangify module is a module intended for slang
developers.

It abstracts the internals of slang creation and activation so that module
developers of slangs have a consistent interface they can work with across
current and future versions of the Raku Programming Language.

To use it you do the following:

=begin code
use Slangify Foo::Grammar, Foo::Actions;
=end code

Either the Grammar or the Actions can be replaced with C<Mu> to indicate that
they should remain unchanged.

Two additional parameters, for legacy grammars and legacy actions, are also
accepted.

While using Slangify is logically the last step in your code, it's worth
understanding it somewhat before you begin, so that you can align your
code with it.  For further details, read the documentation for
L<Slangify|https://raku.land/zef:lizmat/Slangify>.

=head2 The Raku Grammar

This is the point where you need to do the most digging.  The Raku grammar
is not small, and nor is it simple; its extensive error messages, which
are great when programming, hinder the readability.

The sources for the Raku grammar are:

=item1 L<The new AST grammar|https://github.com/rakudo/rakudo/blob/main/src/Raku/Grammar.nqp>

=item1 L<The old, pre-AST grammar|https://github.com/rakudo/rakudo/blob/main/src/Perl6/Grammar.nqp>

Unfortunately there's no substitute for digging through the grammar and
locating the tokens/rules which you wish to override.

=head2 The Slang Grammar

Now you need to write the slang grammar, much like Slang::Lambda.  The 
links above to the grammar documentation should help here.

=head2 The Slang Actions

Many slangs will also need an Actions class backing them.  This is also
documented in the grammar documentation linked above.

=head2 Publishing the module

You'll want to get your module published too.  To do this, follow the
instructions under L<Upload your module to zef ecosystem|/language/modules#Upload_your_module_to_zef_ecosystem>.

=end pod
