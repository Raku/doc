=begin pod :kind("Programs") :subkind("programs") :category("programs")

=TITLE Environment variables used by the C<raku> command line

=SUBTITLE How to run Rakudo, a Raku implementation, and modify its behavior
with environment variables.

Rakudo's behavior can be tweaked by a (growing) number of environment variables;
this section attempts to document all those currently in use. They are
interpreter specific in all cases, except where some use conventional names
such as C<PATH>.

The underlying virtual machine is also sensitive to a series of environment
variables; they are listed L<in this wiki
page|https://github.com/rakudo/rakudo/wiki/dev-env-vars#moarvm>.

=head2 Affecting execution from the command line

X<|Programs,RAKUDO_OPT>
=item C<RAKUDO_OPT>

Available as of the 2022.02 Rakudo compiler release.

The C<RAKUDO_OPT> environment variable provides a way to specify default
compiler command line options, overridable by explicitly specifications
on the command line. For example:

=for code :lang<shell>
    RAKUDO_OPT="-I. --ll-exception" raku -Ilib test.raku

would ignore the C<-I.> but would honor the C<--ll-exception> command
line argument.

A simple space splitter is used to separate arguments, making it impossible
to use a arguments with spaces in them.

=head2 Module loading

X<|Programs,RAKUDOLIB>X<|Programs,RAKULIB>X<|Programs,PERL6LIB>
=item C<RAKUDOLIB>, C<RAKULIB> (I<Str>; B<src/core/Inc.pm>)

C<RAKUDOLIB> and C<RAKULIB> append a comma-delimited list of paths to the
search list for modules. C<RAKUDOLIB> is evaluated first. B<NOTE:> These env
vars were added in the Rakudo compiler in version 2020.05. The deprecated older
env var C<PERL6LIB> is still available.

X<|Programs,RAKUDO_MODULE_DEBUG>
=item C<RAKUDO_MODULE_DEBUG> (I<Bool>; B<src/Perl6/ModuleLoader.nqp>)

If true, causes the module loader to print debugging information to standard
error.

X<|Programs,RAKUDO_PRECOMPILATION_PROGRESS>
=item C<RAKUDO_PRECOMPILATION_PROGRESS> (I<Bool>; B<src/Perl6/ModuleLoader.nqp>)

Available as of the 2012.12 release of the Rakudo compiler.

If true, causes the module loader to print the names of modules that are being
re-precompiled on standard error.  As such it is a simplified version of the
functionality offered by C<RAKUDO_MODULE_DEBUG>.

=head2 Error message verbosity and strictness

X<|Programs,RAKU_EXCEPTIONS_HANDLER>
=item C<RAKU_EXCEPTIONS_HANDLER>

If present, the C<print_exception> routine will use a class of that name to
process the exception for output. Rakudo currently ships with
C<Exceptions::JSON> (invoked by setting this variable to C<JSON>), to
override the default output.

Available as of the 2020.01 release of the Rakudo compiler.  Before that it
was available as C<PERL6_EXCEPTIONS_HANDLER> (which was removed in the
2023.03 release of the Rakudo compiler).

Intended to be used by environments that embed the Raku Programming Language,
such as IDEs.

=for code :lang<shell>
    RAKU_EXCEPTIONS_HANDLER=JSON raku -e 'die "foo"'
    # {"X::AdHoc":{"payload":"foo","message":"foo"}}

X<|Programs,RAKUDO_NO_DEPRECATIONS>
=item C<RAKUDO_NO_DEPRECATIONS> (I<Bool>; B<src/core.c/Deprecations.pm6>)

If true, suppresses deprecation warnings triggered by the C<is DEPRECATED>
trait.

X<|Programs,RAKUDO_DEPRECATIONS_FATAL>
=item C<RAKUDO_DEPRECATIONS_FATAL> (I<Bool>; B<src/core.c/Deprecations.pm6>)

If true, deprecation warnings become thrown exceptions.

X<|Programs,RAKUDO_VERBOSE_STACKFRAME>
=item C<RAKUDO_VERBOSE_STACKFRAME> (I<UInt>; B<src/core.c/Backtrace.pm6>)

Displays source code in stack frames surrounded by the specified number of
lines of context; for instance C<RAKUDO_VERBOSE_STACKFRAME = 1> will use one
context line.

X<|Programs,RAKUDO_BACKTRACE_SETTING>
=item C<RAKUDO_BACKTRACE_SETTING> (I<Bool>; B<src/core.c/Backtrace.pm6>)

Controls whether C<.setting> files are included in backtraces.

=head2 Affecting precompilation

X<|Programs,RAKUDO_PREFIX>
=item C<RAKUDO_PREFIX> (I<Str>; B<src/core.c/CompUnit/RepositoryRegistry.pm6>)

When this is set, Rakudo will look for the standard repositories (perl, vendor,
site) in the specified directory. This is intended as an escape hatch for
build-time bootstrapping issues, where Rakudo may be built as an unprivileged
user without write access to the runtime paths in NQP's config.

X<|Programs,RAKUDO_PRECOMP_DIST>
=item C<RAKUDO_PRECOMP_DIST> (B<src/core.c/CompUnit/PrecompilationRepository.pm6>)
X<|Programs,RAKUDO_PRECOMP_LOADING>
=item C<RAKUDO_PRECOMP_LOADING> (B<src/core.c/CompUnit/PrecompilationRepository.pm6>)
X<|Programs,RAKUDO_PRECOMP_WITH>
=item C<RAKUDO_PRECOMP_WITH> (B<src/core.c/CompUnit/PrecompilationRepository.pm6>)

These are internal variables for passing serialized state to precompilation jobs
in child processes. Please do not set them manually.

X<|Programs,RAKUDO_LOG_PRECOMP>
=item C<RAKUDO_LOG_PRECOMP>

If set to 1, diagnostic information about the precompilation process is
emitted.

X<|Programs,RAKUDO_NO_PRECOMPILATION>
=item C<RAKUDO_NO_PRECOMPILATION>

If set to 1, precompilation will be disabled. Available as of the 2023.08
release of the Rakudo compiler.

=head2 REPL (Read Eval Print Loop)

X<|Programs,RAKU_REPL_OUTPUT_METHOD>
=item C<RAKU_REPL_OUTPUT_METHOD>

This specifies the name of the method that should be called on the result
value of a statement in the REPL if the statement did B<not> cause any
output of its own.  If absent, C<gist> will be assumed.  One can use
C<raku> to force a more literal, parsable representation.  Or C<Str> to force a
complete string representation.  Available as of the 2020.06 release of
the Rakudo compiler.

X<|Programs,RAKUDO_LINE_EDITOR>
=item C<RAKUDO_LINE_EDITOR>

This specifies the preferred line editor to use; valid values are C<Readline>,
C<Linenoise>, and none. A value of none is useful if you want to avoid the
recommendation message upon REPL startup.

X<|Programs,RAKUDO_DISABLE_MULTILINE>
=item C<RAKUDO_DISABLE_MULTILINE>

If set to 1, will disable multiline input for the REPL.

X<|Programs,RAKUDO_HIST>
=item C<RAKUDO_HIST>

This specifies the location of the history file used by the
line editor; the default is C<~/.raku/rakudo-history>.
Before Rakudo version 2020.02 the default was
C<~/.perl6/rakudo-history>.

=head2 Other

X<|Programs,RAKUDO_DEFAULT_READ_ELEMS>
=item C<RAKUDO_DEFAULT_READ_ELEMS>

This specifies the default number of characters to read on an
L«C<IO::Handle>|/type/IO::Handle» by setting the
L«C<$*DEFAULT-READ-ELEMS>|/language/variables#$*DEFAULT-READ-ELEMS» dynamic
variable.

X<|Programs,RAKUDO_ERROR_COLOR>
=item C<RAKUDO_ERROR_COLOR> (I<Bool>; B<src/core.c/Exception.pm6>)

Controls whether to emit ANSI codes for error highlighting. Defaults to true
if unset, except on Windows.

X<|Programs,INSIDE_EMACS>
=item C<INSIDE_EMACS>

Supported as of release 2022.04 of the Rakudo compiler.  If specified with
a true value, will B<not> try to load any of the line editing modules in
the C<REPL>.  This allows the C<REPL> to be better integrated in the Emacs
environment (which sets this environment variable).

X<|Programs,RAKUDO_MAX_THREADS>
=item C<RAKUDO_MAX_THREADS> (I<UInt>; B<src/core.c/ThreadPoolScheduler.pm6>)

Indicates the maximum number of threads used by default when creating a
C<ThreadPoolScheduler>. Defaults to 64 unless there appear to be more than
8 CPU cores available: in which case it defaults to 8 * number of cores.

As of release 2022.06 of the Rakudo compiler, it is also possible to
specify "B<unlimited>" or "B<Inf>" to indicate that the number of threads
available by the operating system, will be the limiting factor.

X<|Programs,TMPDIR>X<|Programs,TEMP>X<|Programs,TMP>
=item C<TMPDIR>, C<TEMP>, C<TMP> (I<Str>; B<src/core.c/IO/Spec/>)

The C<IO::Spec::Unix.tmpdir> method will return C<$TMPDIR> if it points to a
directory with full access permissions for the current user, with a fallback
default of C<'/tmp'>.

C<IO::Spec::Cygwin> and C<IO::Spec::Win32> use more Windows-appropriate lists
which also include the C<%TEMP%> and C<%TMP%> environment variables.

X<|Programs,PATH>
=item C<PATH>, C<Path> (I<Str>; B<src/core.c/IO/Spec/>)

The C<IO::Spec::Unix.path> method splits C<$PATH> as a
shell would; i.e. as a colon-separated list. C<IO::Spec::Cygwin> inherits this
from C<IO::Spec::Unix>. C<IO::Spec::Win32.path> will read the first defined of
either C<%PATH%> or C<%Path%> as a semicolon-delimited list.

X<|Programs,RAKUDO_SNAPPER>
=item C<RAKUDO_SNAPPER>

Indicates the period in which the telemetry snapper will take a snapshot.
Defaults to .1 for 10 snapshots per second.

X<|Programs,RAKUDO_HOME>
=item C<RAKUDO_HOME>

Allows to override the Raku installation path. Defaults to
C<[rakudo_executable_dir]/../share/perl6> in relocatable builds and the
absolute path to that folder in non-relocatable builds.

X<|Programs,NQP_HOME>
=item C<NQP_HOME>

Allows to override the NQP installation path. Defaults to
C<[rakudo_executable_dir]/../share/nqp> in relocatable builds and the absolute
path to that folder in non-relocatable builds.

=head1 WINDOWS PECULIARITIES

X<|Programs,rakuw.exe>X<|Programs,rakudow.exe>
=head2 Non-console applications

On Windows programs are compiled to either be I<console> applications or
I<non-console> applications. I<Console> applications always open a console
window. There is no straightforward way to suppress this window.

Rakudo provides a separate set of executables suffixed with a C<'w'>
(C<rakuw.exe>, C<rakudow.exe>, ...) that are compiled as I<non-console>
applications. These do not spawn this console window.

B<WARNING> By default these I<non-console> applications will silently swallow
everything that is printed to C<STDOUT> and C<STDERR>.

To receive the output of the program it suffices to redirect it externally:

=for code :lang<batch>
rakuw.exe script.raku >stdout.txt 2>stderr.txt

=end pod
