=begin pod :kind("Programs") :subkind("programs") :category("programs")

=TITLE Shell environment variables used by Raku

=SUBTITLE The variables you can declare to alter its behavior or gather
additional information.

The behavior of L<Rakudo|https://rakudo.org>, the Raku interpreter, can be
tweaked by a (growing) number of environment variables; this section attempts to
document all those currently in use. They are interpreter specific in all cases,
except where some use conventional names such as C<PATH>.

The underlying virtual machine is also sensitive to a series of environment
variables; they are listed L<in this wiki
page|https://github.com/rakudo/rakudo/wiki/dev-env-vars#moarvm>.

=head2 Module loading

X<|RAKUDOLIB>X<|PERL6LIB>
=item C<RAKUDOLIB>, C<PERL6LIB>

C<RAKUDOLIB> and C<PERL6LIB> append a comma-delimited list of paths to the
search list for modules. C<RAKUDOLIB> is evaluated first.

X<|RAKUDO_MODULE_DEBUG>
=item C<RAKUDO_MODULE_DEBUG>

If true, causes the module loader to print debugging information to standard
error.

=head2 Error message verbosity and strictness

X<|RAKU_EXCEPTIONS_HANDLER>
X<|PERL6_EXCEPTIONS_HANDLER>
=item C<RAKU_EXCEPTIONS_HANDLER>

If present, the C<print_exception> routine
will use a class of that name to process the exception for output. Rakudo
currently ships with C<Exceptions::JSON> (invoked by setting this variable to
C<JSON>), to override the default output. B<NOTE:> this env var was added in
version 6.e.  Early implementation has been available in Rakudo compiler
as of version 2019.12, and before that it was available as
C<PERL6_EXCEPTIONS_HANDLER>.

X<|RAKUDO_NO_DEPRECATIONS>
=item C<RAKUDO_NO_DEPRECATIONS>

If true, suppresses deprecation warnings triggered by the C<is DEPRECATED>
trait.

X<|RAKUDO_DEPRECATIONS_FATAL>
=item C<RAKUDO_DEPRECATIONS_FATAL>

If true, deprecation warnings become thrown exceptions.

X<|RAKUDO_VERBOSE_STACKFRAME>
=item C<RAKUDO_VERBOSE_STACKFRAME>

Displays source code in stack frames surrounded by the specified number of
lines of context; for instance C<RAKUDO_VERBOSE_STACKFRAME = 1> will use one
context line.

X<|RAKUDO_BACKTRACE_SETTING>
=item C<RAKUDO_BACKTRACE_SETTING>

Controls whether C<.setting> files are included in backtraces.

=head2 Affecting precompilation

X<|RAKUDO_PREFIX>
=item C<RAKUDO_PREFIX>

When this is set, Rakudo will look for the standard repositories (perl, vendor,
site) in the specified directory. This is intended as an escape hatch for
build-time bootstrapping issues, where Rakudo may be built as an unprivileged
user without write access to the runtime paths in NQP's config.

X<|RAKUDO_PRECOMP_DIST>X<|RAKUDO_PRECOMP_LOADING>X<|RAKUDO_PRECOMP_WITH>
=item C<RAKUDO_PRECOMP_DIST>, C<RAKUDO_PRECOMP_LOADING> C<RAKUDO_PRECOMP_WITH>:

These are internal variables for passing serialized state to precompilation jobs
in child processes. Please do not set them manually.

X<|RAKUDO_LOG_PRECOMP>
=item C<RAKUDO_LOG_PRECOMP>

If set to 1, diagnostic information about the precompilation process is
emitted.

=head2 Line editor

X<|RAKUDO_LINE_EDITOR>
=item C<RAKUDO_LINE_EDITOR>

This specifies the preferred line editor to use; valid values are C<Readline>,
C<Linenoise>, and none. A value of none is useful if you want to avoid the
recommendation message upon REPL startup.

X<|RAKUDO_DISABLE_MULTILINE>
=item C<RAKUDO_DISABLE_MULTILINE>

If set to 1, will disable multiline input for the REPL.

X<|RAKUDO_HIST>
=item C<RAKUDO_HIST>

This specifies the location of the history file used by the
line editor; the default is C<~/.raku/rakudo-history>.
Before Rakudo version 2020.02 the default was
C<~/.perl6/rakudo-history>.

=head2 Other

X<|RAKUDO_DEFAULT_READ_ELEMS>
=item C<RAKUDO_DEFAULT_READ_ELEMS>

This specifies the default number of characters to read on an L«C<IO::Handle>|/type/IO::Handle» by
setting the L«C<$*DEFAULT-READ-ELEMS>|/language/variables#$*DEFAULT-READ-ELEMS»
dynamic variable.

X<|RAKUDO_ERROR_COLOR>
=item C<RAKUDO_ERROR_COLOR>

Controls whether to emit ANSI codes for error highlighting. Defaults to true
if unset, except on Windows.

X<|RAKUDO_MAX_THREADS>
=item C<RAKUDO_MAX_THREADS>

Indicates the maximum number of threads used by default when creating a
C<ThreadPoolScheduler>.  Defaults to 64.

X<|TMPDIR>X<|TEMP>X<|TMP>
=item C<TMPDIR>, C<TEMP>, C<TMP>:

The C<IO::Spec::Unix.tmpdir> method will return C<$TMPDIR> if it points to a
directory with full access permissions for the current user, with a fallback
default of C<'/tmp'>.

C<IO::Spec::Cygwin> and C<IO::Spec::Win32> use more Windows-appropriate lists
which also include the C<%TEMP%> and C<%TMP%> environment variables.

X<|PATH>
=item C<PATH>, C<Path>

The C<IO::Spec::Unix.path> method splits C<$PATH> as a
shell would; i.e. as a colon-separated list. C<IO::Spec::Cygwin> inherits this
from C<IO::Spec::Unix>. C<IO::Spec::Win32.path> will read the first defined of
either C<%PATH%> or C<%Path%> as a semicolon-delimited list.

X<|RAKUDO_SNAPPER>
=item C<RAKUDO_SNAPPER>

Indicates the period in which the telemetry snapper will take a snapshot.
Defaults to .1 for 10 snapshots per second.

=head1 AUTHORS

Initial version written by the Rakudo contributors, see the
L<CREDITS file|https://github.com/rakudo/rakudo/blob/master/CREDITS>.

The L<initial version of this manual
page|https://github.com/rakudo/rakudo/blob/master/docs/running.pod> was written
by Reini Urban, Moritz Lenz and the Rakudo contributors.

=end pod

# vim: expandtab softtabstop=4 shiftwidth=4 ft=perl6
