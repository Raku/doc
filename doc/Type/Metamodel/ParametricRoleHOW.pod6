=begin pod :kind("Type") :subkind("role") :category("metamodel")

=TITLE role Metamodel::ParametricRoleHOW

=SUBTITLE Represents a non-instantiated, parameterized, role.

    class Metamodel::ParametricRoleHOW
        does Metamodel::Naming
        does Metamodel::Documenting
        does Metamodel::Versioning
        does Metamodel::MethodContainer
        does Metamodel::PrivateMethodContainer
        does Metamodel::MultiMethodContainer
        does Metamodel::AttributeContainer
        does Metamodel::RoleContainer
        does Metamodel::MultipleInheritance
        does Metamodel::Stashing
        does Metamodel::TypePretense
        does Metamodel::RolePunning
        does Metamodel::ArrayType {}

I<Warning>: this class is part of the Rakudo implementation, and is not
a part of the language specification.

A C<Metamodel::ParametricRoleHOW> represents a non-instantiated, possibly
parameterized, role:

=for code
(role Zape[::T] {}).HOW.say;# OUTPUT: «Perl6::Metamodel::ParametricRoleHOW.new␤»
(role Zape {}).HOW.say; # OUTPUT: «Perl6::Metamodel::ParametricRoleHOW.new␤»

As usual, C<.new_type> will create a new object of this class.

=for code
my \zipi := Metamodel::ParametricRoleHOW.new_type( name => "zape", group => "Zape");
say zipi.HOW; # OUTPUT: «Perl6::Metamodel::ParametricRoleHOW.new␤»

The extra C<group> argument will need to be used to integrate it in a parametric
role group, which will need to be defined in advance.

Roles L<pretend to be|/type/Metamodel::TypePretense> of types C<Mu>,
C<Any>, and C<Cool>, and L<delegate|/type/Metamodel::MethodDelegation>
methods to C<Any>.

I<Note>: As most of the C<Metamodel> classes, this one is here mainly for
illustration purposes and it's not intended for the final user to instantiate,
unless their intention is really to create a parametric role group.

=end pod
