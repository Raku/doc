=begin pod

=TITLE class Metamodel::ModuleHOW

=SUBTITLE Metaobject representing a Perl 6 module.

    class Metamodel::ModuleHOW
        does Metamodel::Naming
        does Metamodel::Documenting
        does Metamodel::Versioning
        does Metamodel::Stashing
        does Metamodel::TypePretense
        does Metamodel::MethodDelegation { }

C<Metamodel::ModuleHOW> is the meta class behind the C<module> keyword.

    module M {}
    say M.HOW ~~ Metamodel::ModuleHOW;  # OUTPUT: «True␤»

=head1 Methods

C<Metamodel::ModuleHOW> provides a number of internal methods
(C<archetypes>, C<new>, C<new_type>, C<compose> and C<is_composed>).
Of these, only C<new_type> is documented below.

=head2 new_type

    method new_type(:$name = '<anon>', :$repr, :$ver, :$auth)

For example, the following code declares two modules, C<A> and C<B>,
where C<B> is declared via the meta model:

=for code :skip-test
module   A:ver<0.1>:auth<somebody> {}
constant B := Metamodel::ModuleHOW.new_type(name => 'B',
                                            ver  => v0.1,
                                            auth => 'somebody');

=end pod
