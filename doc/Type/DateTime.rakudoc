=begin pod :kind("Type") :subkind("class") :category("basic")

=TITLE class DateTime

=SUBTITLE Calendar date with time

    class DateTime does Dateish {}

For handling points in civil time, a C<DateTime> object stores year, month,
day, hour, minute (all L<Int|/type/Int>), second (potentially fractional) and
a time zone.

It provides methods for calculating with date (for the Gregorian calendar) and time.

C<DateTime> methods are immutable; if you are tempted to modify one, create a
modified copy instead.

Time zones are handled as L<Integers|/type/Int> in B<seconds> offset from UTC,
not by time zone name.

=begin code
my $dt = DateTime.new(
    year    => 2015,
    month   => 11,
    day     => 21,
    hour    => 16,
    minute  => 1,
);

say $dt;                            # OUTPUT: «2015-11-21T16:01:00Z␤»
say $dt.later(days => 20);          # OUTPUT: «2015-12-11T16:01:00Z␤»
say $dt.truncated-to('hour');       # OUTPUT: «2015-11-21T16:00:00Z␤»
say $dt.in-timezone(-8 * 3600);     # OUTPUT: «2015-11-21T08:01:00-0800␤»

my $now = DateTime.now(formatter => { sprintf "%02d:%02d", .hour, .minute });
say $now;                           # 12:45 (or something like that)
=end code

Since version 6.d, using synthetic codepoints such as 7̈ will result in an
error.

=head1 Methods

=head2 method new

=for code :skip-test<compile time error>
multi method new(Int :$year!, Int :$month = 1, Int :$day = 1,
                 Int :$hour = 0, Int :$minute = 0, :$second = 0,
                 Int :$timezone = 0, :&formatter)
multi method new(Date :$date!,
                 Int :$hour = 0, Int :$minute = 0, :$second = 0,
                 Int :$timezone = 0, :&formatter)
multi method new(Int() $year, Int() $month, Int() $day,
                 Int() $hour, Int $minute, $second,
                 Int() :$timezone = 0, :&formatter)
multi method new(Instant:D $i,  :$timezone=0, :&formatter)
multi method new(Numeric:D $posix,  :$timezone=0, :&formatter)
multi method new(Str:D $format, :$timezone=0, :&formatter)

Creates a new C<DateTime> object. One option for creating a new DateTime object
is from the components (year, month, day, hour, ...) separately. Another is to
pass a L<Date|/type/Date> object for the date component, and specify the time
component-wise. Yet another is to obtain the time from an
L<Instant|/type/Instant>, and only supply the time zone and formatter. Or
instead of an Instant you can supply an L<Numeric|/type/Numeric> as a UNIX timestamp.

You can also supply a L<Str|/type/Str> formatted in ISO 8601 timestamp
notation or as a full L<RFC 3339|https://tools.ietf.org/html/rfc3339>
date and time.  Strings should be formatted as C<yyyy-mm-ddThh:mm:ssZ>
or C<yyyy-mm-ddThh:mm:ss+0100>.  We are somewhat less restrictive than the
ISO 8601 standard, as we allow Unicode digits and mixing of condensed
and extended time formats.

An invalid input string throws an exception of type
L<X::Temporal::InvalidFormat|/type/X::Temporal::InvalidFormat>. If you supply a string that includes a time
zone and supply the C<timezone> named argument, an exception of type
L<X::DateTime::TimezoneClash|/type/X::DateTime::TimezoneClash> is thrown.

    my $datetime = DateTime.new(year => 2015,
                                month => 1,
                                day => 1,
                                hour => 1,
                                minute => 1,
                                second => 1,
                                timezone => 1);
    $datetime = DateTime.new(date => Date.new('2015-12-24'),
                             hour => 1,
                             minute => 1,
                             second => 1,
                             timezone => 1);
    $datetime = DateTime.new(2015, 1, 1, # First January of 2015
                             1, 1, 1);   # Hour, minute, second with default time zone
    $datetime = DateTime.new(now);                       # Instant.
    # from a Unix timestamp
    say $datetime = DateTime.new(1470853583.3);          # OUTPUT: «2016-08-10T18:26:23.300000Z␤»
    $datetime = DateTime.new("2015-01-01T03:17:30+0500") # Formatted string

Since Rakudo release 2022.03, the C<day> parameter can be a C<Callable>, with
C<*> returning the last day in the month, and C<*-n> returning the last but
C<n>.

=head2 method now

    method now(:$timezone = $*TZ, :&formatter --> DateTime:D)

Creates a new C<DateTime> object from the current system time. A custom
L<formatter|/routine/formatter> and L<timezone|/routine/timezone> can be provided. The C<:$timezone> is
the offset B<in seconds> from L<GMT|https://en.wikipedia.org/wiki/Greenwich_Mean_Time>
and defaults to the value of L«C<$*TZ> variable|/language/variables#index-entry-%24*TZ».

    say DateTime.now; # OUTPUT: «2018-01-08T13:05:32.703292-06:00␤»

Note that one may use the methods shown below chained to the C<.now> to easily express current
values, e.g.,

    say DateTime.now.year; # OUTPUT: «2018␤»

=head2 method clone

    method clone(DateTime:D: :$year, :$month, :$day, :$hour, :$minute, :$second, :$timezone, :&formatter)

Creates a new C<DateTime> object based on the invocant, but with the given
arguments overriding the values from the invocant.

    say DateTime.new('2015-12-24T12:23:00Z').clone(hour => 0);
    # OUTPUT: «2015-12-24T00:23:00Z␤»

Note that this can lead to invalid dates in some circumstances:

    say DateTime.new("2012-02-29T12:34:56Z").clone(year => 2015);
    CATCH { default { put .^name, ': ', .Str } };
    # OUTPUT: «X::OutOfRange: Day out of range. Is: 29, should be in 1..28␤»

=head2 method hh-mm-ss

    method hh-mm-ss(DateTime:D: --> Str:D)

Returns the time represented by the object as a string in 24-hour HH:MM:SS format:

    say DateTime.new("2052-02-29T22:34:56Z").hh-mm-ss;
    # OUTPUT: «22:34:56␤»

=head2 method hour

    method hour(DateTime:D: --> Int:D)

Returns the hour component.

    say DateTime.new('2012-02-29T12:34:56Z').hour;      # OUTPUT: «12␤»

=head2 method minute

    method minute(DateTime:D: --> Int:D)

Returns the minute component.

    say DateTime.new('2012-02-29T12:34:56Z').minute;     # OUTPUT: «34␤»

=head2 method second

    method second(DateTime:D:)

Returns the second component, including potentially fractional seconds.

    say DateTime.new('2012-02-29T12:34:56Z').second;     # OUTPUT: «56␤»
    say DateTime.new('2012-02-29T12:34:56.789Z').second; # OUTPUT: «56.789␤»
    say DateTime.new('2012-02-29T12:34:56,789Z').second; # comma also ok

=head2 method whole-second

    method whole-second(DateTime:D:)

Returns the second component, rounded down to an L<Int|/type/Int>.

    say DateTime.new('2012-02-29T12:34:56.789Z').whole-second;      # OUTPUT: «56␤»

=head2 method timezone

    method timezone(DateTime:D: --> Int:D)

Returns the time zone B<in seconds> as an offset from UTC.

    say DateTime.new('2015-12-24T12:23:00+0200').timezone;          # OUTPUT: «7200␤»

=head2 method offset

    method offset(DateTime:D: --> Int:D)

Returns the time zone B<in seconds> as an offset from UTC. This is an alias for
L<#method timezone>.

    say DateTime.new('2015-12-24T12:23:00+0200').offset;            # OUTPUT: «7200␤»

=head2 method offset-in-minutes

    method offset-in-minutes(DateTime:D: --> Real:D)

Returns the time zone in minutes as an offset from UTC.

    say DateTime.new('2015-12-24T12:23:00+0200').offset-in-minutes; # OUTPUT: «120␤»

=head2 method offset-in-hours

    method offset-in-hours(DateTime:D: --> Real:D)

Returns the time zone in hours as an offset from UTC.

=for code
say DateTime.new('2015-12-24T12:23:00+0200').offset-in-hours;   # OUTPUT: «2␤»

=head2 method Str

    method Str(DateTime:D: --> Str:D)

Returns a string representation of the invocant, as done by
L<the formatter|/type/Dateish#method_formatter>.
If no formatter was specified, an ISO 8601 timestamp will be returned.

=for code
say DateTime.new('2015-12-24T12:23:00+0200').Str;
# OUTPUT: «2015-12-24T12:23:00+02:00␤»

=head2 method Instant

    method Instant(DateTime:D: --> Instant:D)

Returns an L<Instant|/type/Instant> object based on the invocant.

    say DateTime.new('2015-12-24T12:23:00+0200').Instant; # OUTPUT: «Instant:1450952616␤»

=head2 method day-fraction

    method day-fraction(DateTime:D: --> Real:D)

Returns the instant's time as a fraction of a 24-hour day.

    say DateTime.new('2021-12-24T12:23:00.43Z').day-fraction; # OUTPUT: «0.5159772␤»

Notice the C<day-fraction> value is the same as the fractional part of
the C<modified-julian-date> for the same instant.

=head2 method julian-date

    method julian-date(DateTime:D: --> Real:D)

Returns the L<Julian date|https://en.wikipedia.org/wiki/Julian_day> (JD) for the UTC date and time.

    say DateTime.new('2021-12-24T12:23:00.43Z').julian-date; # OUTPUT: «2459573.0159772␤»

The C<julian-date> starts at zero at the epoch of noon UTC on
I<November 24, 4714 B.C.> on the L<proleptic|https://en.m.wikionary.org/wiki/proleptic> Gregorian calendar (the calendar
in use in much of the world and in international commerce and travel). The JD
is used in astronomy to define times of celestial objects transiting the
Earth's Prime Meridian. For any instant, it is the sum of the number of whole days and
the fraction of a day from that epoch to that instant.

=head2 method modified-julian-date

    method modified-julian-date(DateTime:D: --> Real:D)

Returns the L<Modified Julian Date|https://en.wikipedia.org/wiki/Julian_day> (MJD) for the UTC date and time.

    say DateTime.new('2021-12-24T12:23:00.43Z').modified-julian-date; # OUTPUT: «59572.5159772␤»

Notice the fractional part of the C<modified-julian-date> is same value as the C<day-fraction> for the same instant.
Likewise, the integral part of the I<MJD> is the same value as the C<daycount> for the same instant since they
reference the same epoch (November 17, 1858).
The MJD is obtained by subtracting the constant C<2_400_000.5> from the I<Julian Date> and is used to simplify
transformations between civil and astronomical time systems.

=head2 method posix

    method posix(Bool:D: $ignore-timezone = False --> Int:D)

Returns the date and time as a POSIX/UNIX timestamp (integral seconds since the POSIX epoch,
1970-01-01T00:00:00Z).

If C<$ignore-timezone> is C<True>, the C<DateTime> object will be treated as if
the time zone offset is zero.

=for code
say DateTime.new('2015-12-24T12:23:00Z').posix;       # OUTPUT: «1450959780␤»

=head2 method truncated-to

    method truncated-to(DateTime:D: Cool $unit)

Returns a copy of the invocant, with everything smaller than the specified
unit truncated to the smallest possible value.

    my $d = DateTime.new("2012-02-29T12:34:56.946314Z");
    say $d.truncated-to('second');      # OUTPUT: «2012-02-29T12:34:56Z␤»
    say $d.truncated-to('minute');      # OUTPUT: «2012-02-29T12:34:00Z␤»
    say $d.truncated-to('hour');        # OUTPUT: «2012-02-29T12:00:00Z␤»
    say $d.truncated-to('day');         # OUTPUT: «2012-02-29T00:00:00Z␤»
    say $d.truncated-to('month');       # OUTPUT: «2012-02-01T00:00:00Z␤»
    say $d.truncated-to('year');        # OUTPUT: «2012-01-01T00:00:00Z␤»

DateTimes with fractional seconds can be truncated to whole seconds with
C<.truncated-to('second')>.

=head2 method Date

    multi method Date(DateTime:U --> Date:U)
    multi method Date(DateTime:D --> Date:D)

Converts the invocant to L«C<Date>|/type/Date».

=for code
say DateTime.new("2012-02-29T12:34:56.946314Z").Date; # OUTPUT: «2012-02-29␤»
say DateTime.Date;                                    # OUTPUT: «(Date)␤»

=head2 method DateTime

    method DateTime(--> DateTime)

Returns the invocant.

    say DateTime.new("2012-02-29T12:34:56.946314Z").DateTime;
    # OUTPUT: «2012-02-29T12:34:56.946314Z␤»
    say DateTime.DateTime;
    # OUTPUT: «(DateTime)␤»

=head2 method utc

    method utc(DateTime:D: --> DateTime:D)

Returns a DateTime object for the same time, but in time zone UTC.

    say DateTime.new('2015-12-24T12:23:00+0200').utc;
    # OUTPUT: «2015-12-24T10:23:00Z␤»

=head2 method in-timezone

    method in-timezone(DateTime:D: Int(Cool) $timezone = 0 --> DateTime:D)

Returns a DateTime object for the same time, but in the specified C<$timezone>,
which is the offset B<in seconds> from
L<GMT|https://en.wikipedia.org/wiki/Greenwich_Mean_Time>.

    say DateTime.new('2015-12-24T12:23:00Z').in-timezone(3600 + 1800); # OUTPUT: «2015-12-24T13:53:00+0130␤»

Per L<RFC 7164|https://tools.ietf.org/html/rfc7164#section-3>, leap seconds do
not respect local time and always occur at the end of the I<UTC> day:

    say DateTime.new: '2017-01-01T00:59:60+01:00'
    # OUTPUT: «2017-01-01T00:59:60+01:00␤»

=head2 method local

    method local(DateTime:D: --> DateTime:D)

Returns a DateTime object for the same time, but in the local time zone
(L«C<$*TZ>|/language/variables#index-entry-%24*TZ»).

    my $*TZ = -3600;
    say DateTime.new('2015-12-24T12:23:00+0200').local; # OUTPUT: «2015-12-24T09:23:00-0100␤»

=head2 sub infix:<->

    multi sub infix:<-> (DateTime:D, Duration:D --> DateTime:D)
    multi sub infix:<-> (DateTime:D, DateTime:D --> Duration:D)

Takes a L«C<DateTime>|/type/DateTime» to subtract from and either a
L«C<Duration>|/type/Duration» or another C<DateTime> object. Returns a new
C<DateTime> object or the C<Duration> between the two dates, respectively. When
subtracting C<Duration>, time zone of the original C<DateTime> is preserved
in the returned C<DateTime> object.

    say raku DateTime.new(:2016year) - DateTime.new(:2015year):;
    # OUTPUT: «Duration.new(31536001.0)␤»
    say DateTime.new(:2016year, :3600timezone) - Duration.new(31536001.0);
    # OUTPUT: «2015-01-01T00:00:00+01:00␤»

=head2 sub infix:<+>

    multi sub infix:<+> (DateTime:D, Duration:D --> DateTime:D)
    multi sub infix:<+> (Duration:D, DateTime:D --> DateTime:D)

Takes a L«C<DateTime>|/type/DateTime» and increases it by the given
L«C<Duration>|/type/Duration», preserving the time zone.

    say DateTime.new(:2015year) + Duration.new(31536001.0);
    # OUTPUT: «2016-01-01T00:00:00Z␤»
    say Duration.new(42) + DateTime.new(:2015year, :3600timezone);
    # OUTPUT: «2015-01-01T00:00:42+01:00␤»

=head2 sub infix:«<=>»

    multi sub infix:«<=>»(DateTime:D \a, DateTime:D \b --> Order:D)

Compares the equivalent instant, returns the Order.

    say DateTime.now <=> DateTime.now; # OUTPUT: «Less␤»

=head2 sub infix:<cmp>

    multi sub infix:<cmp>(DateTime:D \a, DateTime:D \b --> Order:D)

Compares the equivalent instant, returns the Order.

=head2 sub infix:«<»

    multi sub infix:«<»(DateTime:D \a, DateTime:D \b --> Bool:D)

Compares the equivalent instant, returns a C<Bool>

=head2 sub infix:«>»

    multi sub infix:«>»(DateTime:D \a, DateTime:D \b --> Bool:D)

Compares the equivalent instant, returns a C<Bool>

=head2 sub infix:«<=»

    multi sub infix:«<=»(DateTime:D \a, DateTime:D \b --> Bool:D)

Compares the equivalent instant, returns a C<Bool>

=head2 sub infix:«>=»

    multi sub infix:«>=»(DateTime:D \a, DateTime:D \b --> Bool:D)

Compares the equivalent instant, returns a C<Bool>

=head2 sub infix:«==»

    multi sub infix:«==»(DateTime:D \a, DateTime:D \b --> Bool:D)

Compares the equivalent instant, returns a C<Bool>

=head2 sub infix:«!=»

    multi sub infix:«!=»(DateTime:D \a, DateTime:D \b --> Bool:D)

Compares the equivalent instant, returns a C<Bool>

=end pod
