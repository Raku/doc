=begin pod

=TITLE class List

=SUBTITLE Sequence of values

    my class List is Iterable does Positional { .. }

C<List> stores items sequentially and potentially lazily.

Indexes into lists and arrays start at 0 by default.

You can assign to list elements if they are containers. Use
Arrays to have every value of the list stored in a container.

=head1 Items, Flattening and Sigils

In Perl 6, assigning a C<List> to a scalar variable does not lose
information. The difference is that iteration generally treats a
list (or any other list-like object, like a L<Seq> or an L<Array>)
inside a scalar as a single element, as long as it's part of another .

    my @a = 1, 2, 3;
    for @a { }      # three iterations

    my $s = @a;
    for $s { }      # one iteration
    for @a.item { } # one iteration
    for $s.list { } # three iterations

Lists generally don't interpolate (flatten) into other lists, except
when they are not itemized, and the single argument to an operation
such as C<append>:

    my @a = 1, 2, 3;
    my @nested = @a, @a;           # two elements
    my @flat = flat @a, @a;        # six elements, with explicit flat
    my @b = 'a', 'b';
    @b.append: @a;                 # @b now has 5 elements, because @a
                                   # is the sole argument to append
    my @c = 'a', 'b';
    @c.append: $@a;                # @b now has 3 elements, because of the
                                   # itemization with $
    say @c.elems;

C<.item> can often be written as C<$( ... )>, and on an array variable
even as C<$@a>.

The same flattening behavior applies all objects that do the
L<Iterable|/type/Iterable> role, notable L<hashes|/type/Hash>:

    my %h = a => 1, b => 2;
    my @b = %h;   say @b.elems;     # 2
    my @c = %h, ; say @c.elems;     # 1
    my @d = $%h;  say @d.elems;     # 1

Slurpy parameters (C<*@a>) flatten non-itemized sublists:

    sub fe(*@flat) { @flat.elems }
    say fe(<a b>, <d e>);           # 4
    say fe(<a b>, <d e>.item);      # 3

=head1 Methods

=head2 routine elems

Defined as:

    multi sub    elems($list)  returns Int:D
    multi method elems(List:D:) returns Int:D

Usage:

    elems LIST
    LIST.elems

Returns the number of elements in the list.

=head2 routine end

Defined as:

    multi sub    end($list)  returns Int:D
    multi method end(List:D:) returns Int:D

Usage:

    end LIST
    LIST.end

Returns the index of the last element.

=head2 routine keys

Defined as:

    multi sub    keys($list)  returns Seq:D
    multi method keys(List:D:) returns Seq:D

Usage:

    keys LIST
    LIST.keys

Returns a sequence of indexes into the list (e.g., 0..(@list.elems-1)).

=head2 routine values

Defined as:

    multi sub    values($list)  returns Seq:D
    multi method values(List:D:) returns Seq:D

Usage:

    values LIST
    LIST.values

Returns a sequence of the list elements, in order.

=head2 routine kv

Defined as:

    multi sub    kv($list)  returns Seq:D
    multi method kv(List:D:) returns Seq:D

Usage:

    kv LIST
    LIST.kv

Returns an interleaved sequence of indexes and values. For example

    <a b c>.kv

Returns

    (0, 'a', 1, 'b', 2, 'c').Seq

=head2 routine pairs

Defined as:

    multi sub    pairs($list)   returns Seq:D
    multi method pairs(List:D:) returns Seq:D

Usage:

    pairs LIST
    LIST.pairs

Returns a sequence of pairs, with the indexes as keys and the list values as
values.

    <a b c>.pairs   # (0 => 'a', 1 => 'b', 2 => 'c').Seq

=head2 routine join

Defined as:

    multi sub    join($separator, *@list) returns Str:D
    multi method join(List:D: $separator) returns Str:D

Usage:

    join SEPARATOR, LIST
    LIST.join(SEPARATOR)

Treats the elements of the list as strings, interleaves them with
C<$separator> and concatenates everything into a single string.

Example:

    join ', ', <a b c>;             # a, b, c

Note that the method form does not flatten sublists:

    say (1, <a b c>).join('|');     # 1|a b c

=head2 routine map

Defined as:

    multi sub    map(&code, *@elems) returns Seq:D
    multi method map(List:D: &code) returns Seq:D

Usage:

    map CODE, LIST
    LIST.map(CODE)

Invokes C<&code> for each element and gathers the return values in
a sequence and returns it. This happens lazily, i.e. C<&code> is only invoked when
the return values are accessed.

Examples:

    > ('hello', 1, 22/7, 42, 'world').map: { .WHAT.perl }
    (Str Int Rat Int Str)
    > map *.Str.chars, 'hello', 1, 22/7, 42, 'world'
    (5 1 8 2 5)

C<map> inspects the arity of the code object, and tries to pass as many
arguments to it as expected:

    sub b($a, $b) { "$a before $b" };
    say <a b x y>.map(&b).join(', ');   # a before b, x before y

iterates the list two items at a time.

Note that C<map> does not flatten embedded lists and arrays, so

    ((1, 2), <a b>).map({ .join(',')})

passes C<(1, 2)> and C<< <a b> >> in turn to the block, leading to a total
of two iterations and the result sequence C<"1,2", "a,b">.
See L<method flatmap|/type/List/#method_flatmap> for an alternative that flattens.

=head2 method flatmap

Defined as:

    method flatmap(List:D: &code) returns Seq:D

Usage:

    LIST.flatmap(CODE)

Like C<map> iterates over the elements of the invocant list, feeding each
element in turn to the code reference, and assembling the return values from
these invocations in a result list.

Unlike C<map> it flattens non-itemized lists and arrays, so

    say ((1, 2), <a b>).flatmap(&uc).join('|');     # 1|2|A|B

invokes C<uc|/type/Str#routine uc> four times.

=head2 routine grep

Defined as:

    multi sub    grep(Mu $matcher, *@elems) returns Seq:D
    multi method grep(List:D:  Mu $matcher) returns Seq:D

Usage:

    grep MATCHER, LIST
    LIST.grep(MATCHER)

Returns a sequence of elements against which C<$matcher> smart-matches.
The elements are returned in the order in which they appear in the original
list.

Examples:

    > ('hello', 1, 22/7, 42, 'world').grep: Int
    (1 42)
    > grep { .Str.chars > 3 }, 'hello', 1, 22/7, 42, 'world'
    (hello 3.142857 world)

=head2 routine grep-index

Defined as:

    multi method grep-index(List:D: Mu $matcher) returns Seq:D

Usage:

    LIST.grep-index(MATCHER)

Returns a sequence of indices against which the associated elements
smart-match.  The indices are returned in order.

Examples:

    > ('hello', 1, 22/7, 42, 'world').grep-index: Int
    (1 3)
    > grep-index { .Str.chars > 3 }, 'hello', 1, 22/7, 42, 'world'
    (0 2 4)

=head2 routine first

Defined as:

    multi sub    first(Mu $matcher, *@elems)
    multi method first(List:D:  Mu $matcher)

Usage:

    first MATCHER, LIST
    LIST.first(MATCHER)

Returns the first item of the list which smart-matches against C<$matcher>,
fails when no values match.

Examples:

    say (1, 22/7, 42).first: * > 5;     # 42
    say $f = ('hello', 1, 22/7, 42, 'world').first: Complex;
    say $f.perl;                        #  Failure.new(exception => X::AdHoc.new(payload => "No values matched"))

=head2 routine first-index

Defined as:

    multi method first-index(List:D: Mu $matcher)

Usage:

    LIST.first-index(MATCHER)

Returns the first index against which C<$matcher> smart-matches, or C<Nil> if
no match was found.

Example:

    say (1, 22/7, 42, 300, 72).first-index: * > 5;   # 2

=head2 routine last-index

Defined as:

    multi method last-index(List:D: Mu $matcher)

Usage:

    LIST.last-index(MATCHER)

Returns the last index against which C<$matcher> smart-matches, or C<Nil> if
no match was found.

Example:

    say (1, 22/7, 42, 300, 72).last-index: * > 5;   # 4

=head2 routine classify

Defined as:

    multi sub    classify(&mapper, *@values) returns Hash:D
    multi method classify(List:D: &mapper)   returns Hash:D

Usage:

    classify MAPPER, LIST
    LIST.classify(MAPPER)

Transforms a list of values into a hash
representing the classification of those values according to a mapper;
each hash key represents the classification for one or more of the
incoming list values, and the corresponding hash value contains
an array of those list values classified by the mapper into the category
of the associated key.

Example:

    say classify { $_ %% 2 ?? 'even' !! 'odd' }, (1, 7, 6, 3, 2);
        #-> even => 6 2, odd => 1 7 3
    say ('hello', 1, 22/7, 42, 'world').classify: { .Str.chars };
        #-> 1 => 1, 2 => 42, 5 => hello world, 8 => 3.142857

=head2 method Bool

Defined as:

    multi method Bool(List:D:) returns Bool:D

Usage:

    LIST.Bool

Returns C<True> if the list has at least one element, and C<False>
for the empty list.

=head2 method Str

Defined as:

    multi method Str(List:D:) returns Str:D

Usage:

    LIST.Str

Stringifies the elements of the list and joins them with spaces
(same as C<.join(' ')>).

=head2 method Int

Defined as:

    multi method Int(List:D:) return Int:D

Usage:

    LIST.Int

Returns the number of elements in the list (same as C<.elems>).

=head2 method Numeric

Defined as:

    multi method Numeric(List:D:) return Int:D

Usage:

    LIST.Numeric

Returns the number of elements in the list (same as C<.elems>).

=head2 routine pick

Defined as:

    multi sub    pick($count, *@list) returns Seq:D
    multi method pick(List:D: $count = 1) returns Mu

Usage:

    pick COUNT, LIST
    LIST.pick(COUNT)

Returns C<$count> elements chosen at random and without repetition
from the invocant. If C<*> is passed as C<$count>, or C<$count> is
greater than or equal to the size of the list, then all elements
from the invocant list are returned in a random sequence.

Examples:

    say <a b c d e>.pick;           # b
    b
    say <a b c d e>.pick: 3;        # (c a e)
    say  <a b c d e>.pick: *;       # (e d a b c)

=head2 routine roll

Defined as:

    multi sub    roll($count, *@list) returns Seq:D
    multi method roll(List:D: $count = 1)

Usage:

    roll COUNT, LIST
    LIST.roll(COUNT)

Returns a sequence of C<$count> elements, each randomly selected from the
list. Each random choice is made independently, like a separate die roll
where each die face is a list element.

If C<*> is passed to C<$count>, returns a lazy, infinite sequence of randomly
chosen elements from the original list.

Examples:

    say <a b c d e>.roll;       # b
    b
    say <a b c d e>.roll: 3;    # c c e
    say roll 8, <a b c d e>;    # b a e d a e b c

    my $random_digits := (^10).roll(*);
    say $random_digits[^15];    # 3 8 7 6 0 1 3 2 0 8 8 5 8 0 5

=head2 routine eager

Defined as:

    multi method eager(List:D:) returns List:D
    sub eager(*@elems) returns List:D

Usage:

    eager LIST
    LIST.eager

Evaluates all elements in the list eagerly, and returns them as a list.

=head2 routine reverse

Defined as:

    multi sub    reverse(*@list ) returns List:D
    multi method reverse(List:D:) returns List:D

Usage:

    reverse(LIST)
    LIST.reverse

Returns a list with the same elements in reverse order.

Note that C<reverse> always refers to reversing elements of a list;
to reverse the characters in a string, use L<flip>.

Examples:

    say <hello world!>.reverse      #  world! hello
    say reverse ^10                 # 9 8 7 6 5 4 3 2 1 0

=head2 routine rotate

Defined as:

    multi sub    rotate(@list,  Int:D $n = 1) returns List:D
    multi method rotate(List:D: Int:D $n = 1) returns List:D

Usage:

    rotate(LIST, INTEGER?)
    LIST.rotate(INTEGER?)

Returns the list rotated by C<$n> elements.

Examples:

    <a b c d e>.rotate(2);   # <c d e a b>
    <a b c d e>.rotate(-1);  # <e a b c d>

=head2 routine sort

Defined as:

    multi sub    sort(*@elems)      returns Seq:D
    multi sub    sort(&by, *@elems) returns Seq:D
    multi method sort(List:D:)      returns Seq:D
    multi method sort(List:D:, &by) returns Seq:D

Usage:

    sort LIST
    sort LIST, SORT_BY
    LIST.sort
    LIST.sort(SORT_BY)

Sorts the list, smallest element first. By default C<< infix:<cmp> >>
is used for comparing list elements.

If C<&by> is provided, and it accepts two arguments,
it is invoked for pairs of list elements, and should return
C<Order::Increase>, C<Order::Same> or C<Order::Decrease>.

If C<&by> accepts only one argument, the list elements are sorted
according to C<< by($a) cmp by($b) >>. The return values of C<&by> are
cached, so that C<&by> is only called once per list element.

Examples:

    say (3, -4, 7, -1, 2, 0).sort;                  # -4 -1 0 2 3 7
    say (3, -4, 7, -1, 2, 0).sort: *.abs;           # 0 -1 2 3 -4 7
    say (3, -4, 7, -1, 2, 0).sort: { $^b leg $^a }; # 7 3 2 0 -4 -1

=head2 routine unique

Defined as:

    multi sub    unique(*@values, :&as) returns Seq:D
    multi method unique(List:D:,  :&as) returns Seq:D

Usage:

    unique LIST, :COMPARE_AS
    LIST.unique(:COMPARE_AS)

Returns a sequence of unique values from the invocant/argument list, such
that only the first occurrence of each duplicated value remains in the
result list. C<unique> uses the semantics of the L<===> operator to decide whether
two objects are the same. The order of the original list is preserved even as
duplicates are removed.

Examples:

    say <a a b b b c c>.unique    # a b c
    say <a b b c c b a>.unique    # a b c

(Use L<C<squish>> instead if you know the input is sorted such that identical
objects are adjacent.)

The optional C<:as> parameter allows you to normalize/canonicalize the elements
before unique-ing. The values are transformed for the purposes of comparison, but
it's still the original values that make it to the result list:

Example:

    say <a A B b c b C>.unique(:as(&lc))          # a B c

=head2 routine squish

Defined as:

    multi sub    squish(*@values, :&as) returns Seq:D
    multi method squish(List:D:,  :&as) returns Seq:D

Usage:

    squish LIST, :COMPARE_AS
    LIST.squish(:COMPARE_AS)

Returns a sequence of values from the invocant/argument list where runs
of more than one value are replaced with only the first instance.
Like L<C<unique>>, C<squish> uses the semantics of the L<===> operator to decide
whether two objects are the same. Unlike L<C<unique>>, this function only
removes adjacent duplicates; identical values further apart are still
kept. The order of the original list is preserved even as duplicates
are removed.

Examples:

    say <a a b b b c c>.squish  # a b c
    say <a b b c c b a>.squish  # a b c b a

The optional C<:as> parameter, just like with L<C<unique>>, allows values to be
temporarily transformed before comparison.

=head2 routine reduce

Defined as:

    multi sub    reduce(&with, *@elems)
    multi method reduce(List:D: &with)

Usage:

    reduce WITH, LIST
    LIST.reduce(WITH)

Applies C<&with> to the first and the second value of the list, then to the
result of that calculation and the third value and so on. Returns a single item
generated that way.

Note that C<reduce> is an implicit loop, and thus responds to C<next>, C<last>
and C<redo> statements.

Example:

    say (1, 2, 3).reduce: * - *;    # -4

=head2 routine splice

Defined as:

    multi sub    splice(@list,  $start, $elems?, *@replacement) returns List:D
    multi method splice(List:D: $start, $elems?, *@replacement) returns List:D

Usage:

    splice(LIST, START, ELEMS?, REPLACEMENT?)
    LIST.splice(START, ELEMS?, REPLACEMENT?)

Deletes C<$elems> elements starting from index C<$start> from the list,
returns them and replaces them by C<@replacement>. If C<$elems> is omitted,
all the elements starting from index C<$start> are deleted.

Example:

    my @foo = <a b c d e f g>;
    say @foo.splice(2, 3, <M N O P>);       # c d e
    say @foo;                               # a b M N O P f g

=head2 routine combinations

Defined as:

    multi sub    combinations ($n, $k)                     returns Seq:D
    multi method combinations (List:D: Int:D $of)          returns Seq:D
    multi method combinations (List:D: Range:D $of = 0..*) returns Seq:D

Usage:

    combinations INTEGER, INTEGER
    LIST.combinations(INTEGER)
    LIST.combinations(RANGE)

The C<Int> variant returns all C<$of>-combinations of the invocant list.
For example

    say .join('|') for <a b c>.combinations(2);

prints

    a|b
    a|c
    b|c

because all the 2-combinations of C<'a', 'b', 'c'> are
C<['a', 'b'], ['a', 'c'], ['b', 'c']>.

The C<Range> variant combines all the individual combinations into a single
list, so

    say .join('|') for <a b c>.combinations(2..3);

prints

    a|b
    a|c
    b|c
    a|b|c

because that's the list of all 2- and 3-combinations.

The subroutine form C<combinations($n, $k)> is equivalent to
C<(^$n).combinations($k)>, so

    .say for combinations(4, 2)

prints

    0 1
    0 2
    0 3
    1 2
    1 3
    2 3

=head2 routine permutations

Defined as:

    multi sub    permutations($n)      returns Seq:D
    multi method permutations(List:D:) returns Seq:D

Usage:

    permutations(INTEGER)
    LIST.permutations

Returns all possible permutations of a list as a sequence of lists. So

    say .join('|') for <a b c>.permutations

prints

    a|b|c
    a|c|b
    b|a|c
    b|c|a
    c|a|b
    c|b|a

C<permutations> treats all list elements as distinguishable, so
C<(1, 1, 2).permutations> still returns a list of 6 elements, even though
there are only three distinct permutations.

The subroutine form C<permutations($n)> is equivalent to
C<(^$n).permutations>, so

    .say for permutations 3;

prints

    1 2 3
    1 3 2
    2 1 3
    2 3 1
    3 1 2
    3 2 1

=head2 method rotor

Defined as:

    method rotor(*@cycle, Bool() :$partial) returns Seq:D

Usage:

    LIST.rotor(EXPR, :partial?)

Returns a sequence of lists, where each sublist is made up of elements of the
invocant.

In the simplest case, C<@cycle> contains just one integer, in which case the
invocant list is split into sublists with as many elements as the integer
specifies. If C<:$partial> is True, the final chunk is included even if it
doesn't satisfy the length requirement:

    say ('a'..'h').rotor(3).join('|');              # a b c|d e f
    say ('a'..'h').rotor(3, :partial).join('|');    # a b c|d e f|g h

If the element of C<@cycle> is a L</type/Pair|Pair> instead, the key of the
pair specifies the length of the return sublist, and the value the gap between
sublists; negative gaps produce overlap:

    say ('a'..'h').rotor(2 => 1).join('|');         # a b|d e|g h
    say ('a'..'h').rotor(3 => -1).join('|');        # a b c|c d e|e f g

If C<@cycle> contains more than element, C<rotor> cycles through it to find
the number of elements for each sublist:

    say ('a'..'h').rotor(2, 3).join('|');           # a b|c d e|f g
    say ('a'..'h').rotor(1 => 1, 3).join('|');      # a|c d e|f

Combining multiple cycles and C<:partial> also works:

    say ('a'..'h').rotor(1 => 1, 3 => -1, :partial).join('|');
                                                    # a|c d e|e|g h

=head2 routine zip

Defined as:

    sub zip(**@e) returns Seq:D

Usage:

    zip LISTS

Zips two or more lists or other L<iterables|/type/Iterable> together by
returning a sequence made of a list of all first elements of all lists, then a
list of all second elements of a list etc.

    say .join for zip  <a b c>, <d e f>;

Produces the output

    ad
    be
    cf

C<zip> has an infix synonym, the C<Z> operator.

    say .join for <a b c> Z <d e f>;    # same output as above

When the first input list is exhausted, no more elements are returned; so
trailing elements from longer input lists are discarded.

If you just wish to skip missing entries in shorter sublists,
use L<roundrobin|/type/List#sub_roundrobin> instead:

    for roundrobin(@queue1, @queue2, @queue3) -> $next {
        ...
    }

=head2 sub roundrobin

Defined as:

    multi roundrobin(List:D: --> Seq)

Usage:

    roundrobin LISTS

C<roundrobin> is very similar to L<zip|/type/List#routine_zip>.  The
difference is that C<roundrobin> will not stop on lists that run out of
elements but simply skip any undefined value:

    my @a = 1;
    my @b = 1..2;
    my @c = 1..3;
    for flat roundrobin(@a, @b, @c) -> $x { $x.say }

will display the following values: C<1, 1, 1, 2, 2, 3>

=end pod
